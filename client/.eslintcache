[{"/Users/RaymondChu/react-chess/client/src/index.js":"1","/Users/RaymondChu/react-chess/client/src/components/App.js":"2","/Users/RaymondChu/react-chess/client/src/components/Join.js":"3","/Users/RaymondChu/react-chess/client/src/components/Game.js":"4","/Users/RaymondChu/react-chess/client/src/components/Board.js":"5","/Users/RaymondChu/react-chess/client/src/helpers/InitializeChessBoard.js":"6","/Users/RaymondChu/react-chess/client/src/pieces/Queen.js":"7","/Users/RaymondChu/react-chess/client/src/pieces/Rook.js":"8","/Users/RaymondChu/react-chess/client/src/components/Square.js":"9","/Users/RaymondChu/react-chess/client/src/pieces/Piece.js":"10","/Users/RaymondChu/react-chess/client/src/pieces/Knight.js":"11","/Users/RaymondChu/react-chess/client/src/pieces/Pawn.js":"12","/Users/RaymondChu/react-chess/client/src/pieces/King.js":"13","/Users/RaymondChu/react-chess/client/src/pieces/Bishop.js":"14","/Users/RaymondChu/react-chess/client/src/socket/socket.js":"15","/Users/RaymondChu/react-chess/client/src/components/Lobby.js":"16","/Users/RaymondChu/react-chess/client/src/components/Navbar.js":"17","/Users/RaymondChu/react-chess/client/src/components/Chat.js":"18","/Users/RaymondChu/react-chess/client/src/components/Message.js":"19"},{"size":230,"mtime":1608000858226,"results":"20","hashOfConfig":"21"},{"size":624,"mtime":1609274290793,"results":"22","hashOfConfig":"21"},{"size":1416,"mtime":1609277615750,"results":"23","hashOfConfig":"21"},{"size":15202,"mtime":1609300049743,"results":"24","hashOfConfig":"21"},{"size":2428,"mtime":1609214031001,"results":"25","hashOfConfig":"21"},{"size":1002,"mtime":1609214124570,"results":"26","hashOfConfig":"21"},{"size":1478,"mtime":1608160954705,"results":"27","hashOfConfig":"21"},{"size":1310,"mtime":1608160875998,"results":"28","hashOfConfig":"21"},{"size":271,"mtime":1608059556442,"results":"29","hashOfConfig":"21"},{"size":345,"mtime":1609000464526,"results":"30","hashOfConfig":"21"},{"size":946,"mtime":1608160954701,"results":"31","hashOfConfig":"21"},{"size":2000,"mtime":1609009986321,"results":"32","hashOfConfig":"21"},{"size":1022,"mtime":1608160954700,"results":"33","hashOfConfig":"21"},{"size":1298,"mtime":1608160954700,"results":"34","hashOfConfig":"21"},{"size":138,"mtime":1608405253953,"results":"35","hashOfConfig":"21"},{"size":1356,"mtime":1609278258706,"results":"36","hashOfConfig":"21"},{"size":784,"mtime":1609277512783,"results":"37","hashOfConfig":"21"},{"size":1991,"mtime":1609290385064,"results":"38","hashOfConfig":"21"},{"size":936,"mtime":1609286737163,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1psmlgx",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/RaymondChu/react-chess/client/src/index.js",[],["88","89"],"/Users/RaymondChu/react-chess/client/src/components/App.js",["90"],"import React, { useState } from 'react';\nimport Game from './Game';\nimport Navbar from './Navbar';\nimport Lobby from './Lobby';\nimport Join from './Join';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport '../App.css';\n\nconst App = () => {\n  const [username, setUsername] = useState('');\n\n  return (\n    <Router>\n      <Navbar />\n      <Route path='/' exact>\n        <Join setUsername={setUsername} username={username} />\n      </Route>\n      <Route path=\"/game/:gameId\" exact>\n        <Lobby username={username} setUsername={setUsername} />\n      </Route>\n    </Router>\n  )\n};\n\nexport default App;\n","/Users/RaymondChu/react-chess/client/src/components/Join.js",[],"/Users/RaymondChu/react-chess/client/src/components/Game.js",["91","92","93","94"],"import React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport Chat from './Chat';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport { socket } from '../socket/socket';\nimport TextField from '@material-ui/core/TextField';\n\nimport '../styles/Game.css';\n\n\nexport default function Game(props) {\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n    const [playerTurn, setPlayerTurn] = useState(1);\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    const [usernames, setUsernames] = useState([]);\n    //const [validMove, setValidMove] = useState(false);\n    const [start, setStart] = useState(false);\n    const [playerOne, setPlayerOne] = useState(false);\n\n    useEffect(() => {\n      socket.on('userMove', (state) => {\n          var temp = squares.slice();\n          temp[state.endIndex] = temp[state.initialIndex];\n          temp[state.initialIndex] = null;\n  \n          setSquares(temp);\n          setPlayerTurn(playerTurn === 1 ? 2 : 1);\n          setSelectedIndex(-1);\n    //      setValidMove(false);\n          console.log(\"new socket on\");\n\n      })\n    });\n\n     useEffect(() => {\n      socket.emit(\"shouldGameStart\", props.gameId);\n\n      socket.on(\"start game\", (users) => {\n        setStart(true);\n        setUsernames(users);\n      });\n    }, []); \n\n    function handleEnPassant(squares, index) {\n        if (playerTurn === 1) {\n          //left en passant\n          if (index === selectedIndex - 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        \n          //right en passant\n          if (index === selectedIndex - 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        }\n    \n        else {\n          //left en passant\n          if (index === selectedIndex + 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n    \n          //right en passant\n          if (index === selectedIndex + 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n        }\n    \n        return squares;\n    }\n    \n    function checkEnPassant(squares, index) {\n        const enPassantPositions = {\n          1: [24, 25, 26, 27, 28, 29, 30, 31],\n          2: [32, 33, 34, 35, 36, 37, 38, 39]\n        }\n        const otherPlayer = playerTurn === 1 ? 2 : 1;\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n          //left en passant\n          console.log(\"first check\");\n          console.log(squares[selectedIndex - 9] === index);\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n            console.log(\"second check\");\n            return true;\n          }\n          if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n            return true;\n          }\n        }\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n            return true;\n          }      \n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n            return true;\n          }\n        }\n    \n        return false;\n    }\n    \n    function isMyKinginCheck(squares) {\n        return new Promise((resolve, reject) => {\n    \n        var kingIndex = -1;\n        var check = false;\n        var otherPlayer = playerTurn === 1 ? 2 : 1;\n        //locate your king\n        for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n          if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n            kingIndex = i;\n          }\n        }\n        \n        var found = false;\n        console.log(kingIndex);\n    \n        //check if king is in check\n        for (var j = 0; j < squares.length && !found; ++j) {\n          if (squares[j] !== null && squares[j].player === otherPlayer) {\n            const validMove = squares[j].isMoveValid(j, kingIndex, true);\n            const path = squares[j].getPathIndicies(j, kingIndex);\n            if (validMove) {\n              const validPath = checkValidPath(squares, path);\n              if (validPath) {\n                found = true;\n              }\n            }\n          }\n        }\n    \n        if (found) {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: 'red'};\n          check = true;\n        }\n        else {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null};\n          check = false;\n        }\n        const obj = { check, kingIndex };\n        resolve(obj);\n      })\n    }\n    \n    function checkValidPath(squares, path) {\n        var valid = true;\n        \n        for (var i = 0; i < path.length && valid; ++i) {\n          if (squares[path[i]] !== null) {\n            valid = false;\n          }\n        }\n    \n        return valid;\n    }\n    \n    function checkRook(squares, index) {\n        if (index === 6 || index === 62) {\n          if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n            return true;\n          }\n        }\n    \n        if (index === 2 || index === 58) {\n          if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n            return true;\n          }\n        }\n    }\n    \n    function checkCastle(squares, index) {\n        if (selectedIndex === 4 || selectedIndex === 60) {\n          if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n            //short castle\n            if (index === 62) {\n              if (checkRook(squares, index)) {\n                if (squares[61] === null && squares[62] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[61] = new Rook(1);\n                  squares[63] = null;\n                }\n    \n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 6) {\n              if (checkRook(squares, index)) {\n                if (squares[5] === null && squares[6] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[5] = new Rook(2);\n                  squares[7] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            //Long castle\n            if (index === 2) {\n              if (checkRook(squares, index)) {\n                if (squares[1] === null && squares[2] === null && squares[3] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[3] = new Rook(2);\n                  squares[0] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 58) {\n              if (checkRook(squares, index)) {\n                if (squares[57] === null && squares[58] === null && squares[59] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[59] = new Rook(1);\n                  squares[56] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            return squares;\n          }\n        }\n    }\n    \n    \n    function handleClick(index) {\n      var player = usernames[0] === props.username ? 1 : 2;\n      console.log(player);\n      console.log(playerTurn);\n      if (player === playerTurn) {\n        //shallow copy squares \n        const tempsquares = squares.slice();\n    \n        console.log(index);\n        //highlight chess piece\n        if (selectedIndex < 0) {\n          if (tempsquares[index] && (tempsquares[index].player === playerTurn)) {\n            tempsquares[index].style = {...tempsquares[index].style, backgroundColor: \"#575E6B\" };\n            setSquares(tempsquares);\n            setSelectedIndex(index);\n            socket.off('userMove');\n          }\n          else {\n            console.log(\"That is not your piece\");\n          }\n        }\n    \n        //piece has been selected\n        else {\n          tempsquares[selectedIndex].style = {...squares[selectedIndex].style, backgroundColor: null};\n    \n          // castling king and rook\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = checkCastle(tempsquares, index);\n            if (newSquares) {\n              var nextTurn = playerTurn === 1 ? 2 : 1;\n              setSquares(newSquares);\n              setSelectedIndex(-1);\n              setPlayerTurn(nextTurn);\n            }\n            else {\n              console.log(\"invalid move\");\n              setSelectedIndex(-1);\n            }\n          }\n    \n          //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n            const newSquares = handleEnPassant(tempsquares, index);\n            var nextTurn = playerTurn === 1 ? 2 : 1;\n            setSquares(newSquares);\n            setSelectedIndex(-1);\n            setPlayerTurn(nextTurn);\n          }\n    \n          //if destination of piece is clicked on own piece\n          else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            setSquares(tempsquares);\n            setSelectedIndex(-1);\n          }\n    \n          // if destination is not on own piece\n          else {\n            console.log(tempsquares[selectedIndex]);\n            const lastRows = {\n              1: [0, 1, 2, 3, 4, 5, 6, 7],\n              2: [56, 57, 58, 59, 60, 61, 62, 63]\n            };\n            const isSquareOccupied = tempsquares[index] === null ? false : true;\n            const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n            const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n            if (validMove) {\n              const validPath = checkValidPath(tempsquares, pathIndicies);\n              if (validPath) {\n                tempsquares[index] = tempsquares[selectedIndex];\n                tempsquares[index].handleMoved();\n                tempsquares[selectedIndex] = null;\n                console.log(tempsquares[index]);\n    \n                // pawn to queen\n                if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(1);\n                }\n                if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(2);\n                }\n    \n                // check if king is in check with shallow copied board\n                isMyKinginCheck(tempsquares)\n                .then((data) =>{\n                  console.log(data.check);\n                  if (data.check) {\n                    console.log(\"Move your king white!\");\n                    setSelectedIndex(-1);\n                  }\n                  else {\n                    console.log(index);\n//                    setValidMove(true);\n\n                    socket.emit('move', {\n                    initialIndex: selectedIndex,\n                    endIndex: index,\n                    gameId: props.gameId,\n                    }) \n\n                  }\n                }) \n                .catch((err) => {\n                  console.log(err);\n                })        \n              }\n              else {\n                console.log(\"invalid path\", pathIndicies);\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              }\n            }\n            else {\n              console.log(\"invalid move\");\n              setSquares(tempsquares);\n              setSelectedIndex(-1);\n            }\n          }      \n        }\n      }\n\n      else {\n        console.log(\"not your turn\");\n      }\n    }\n\n      return (\n        <div className=\"Game\">\n          {\n            start ? \n            <div className=\"game-container\">\n              <div>\n                <h1>{usernames[0] === props.username ? usernames[1] : usernames[0]}</h1>\n                <Board \n                squares={squares}\n                onClick={(index) => handleClick(index)}\n                player={usernames[0] === props.username ? 1 : 2}\n                />\n                <h1>{usernames[0] === props.username ? usernames[0] : usernames[1]}</h1>\n              </div>\n              <div>\n                  <Chat username={props.username} gameId={props.gameId} />\n              </div>\n            </div>\n            :\n            <div className=\"game-lobby-container\">\n              <h1>Welcome to Online Chess!</h1>\n              <p>\n                Hey {props.username}! This app was made so that you can play chess with your friends at the comfort of your own home!\n              </p>\n              <p>\n                Send this link with a friend to start your chess game\n              </p>\n              \n              <div>\n              <TextField\n                id=\"outlined-read-only-input\"\n                label=\"Share Link\"\n                defaultValue={window.location}\n                InputProps={{\n                  readOnly: true,\n                }}\n                style={{width: '30vw', marginTop: '2%', marginBottom: '1%'}}\n                variant=\"outlined\"\n              />                  \n              </div>\n\n              <div>\n                  <p>Waiting for game to start ...</p>\n              </div>\n            </div>\n          }\n\n        </div>\n      );\n    }\n","/Users/RaymondChu/react-chess/client/src/components/Board.js",["95","96","97"],"import React from 'react';\nimport Square from './Square';\n\nimport '../styles/board.css';\n\nexport default class Board extends React.Component {\n    renderSquare(i, colour) {\n        return <Square \n                onClick={() => this.props.onClick(i)}\n                style={this.props.squares[i] ? this.props.squares[i].style : null}\n                piece={this.props.squares[i]}\n                colour={colour}\n                />\n    }\n\n    render() {\n        var board = [];\n        \n        if (this.props.player === 1) {\n            for (var i = 0; i < 8; ++i) {\n                var row = [];\n                for (var j = 0; j < 8; ++j) {\n                    if (i % 2 === 0) {\n                        if (j % 2 === 0) {\n                            row.push(this.renderSquare(i * 8 + j, \"light\"));\n                        }\n                        else {\n                            row.push(this.renderSquare(i * 8 + j, \"dark\"));\n                        }\n                    }\n    \n                    else {\n                        if (j % 2 === 0) {\n                            row.push(this.renderSquare(i * 8 + j, \"dark\"));\n                        }\n                        else {\n                            row.push(this.renderSquare(i * 8 + j, \"light\"));\n                        }\n                    }\n                }\n                board.push(<div>{row}</div>);\n            }\n        }\n\n        else {\n            for (var i = 7; i >= 0; --i) {\n                var row = [];\n                for (var j = 7; j >= 0; --j) {\n                    if (i % 2 === 0) {\n                        if (j % 2 === 0) {\n                            row.push(this.renderSquare(i * 8 + j, \"light\"));\n                        }\n                        else {\n                            row.push(this.renderSquare(i * 8 + j, \"dark\"));\n                        }\n                    }\n    \n                    else {\n                        if (j % 2 === 0) {\n                            row.push(this.renderSquare(i * 8 + j, \"dark\"));\n                        }\n                        else {\n                            row.push(this.renderSquare(i * 8 + j, \"light\"));\n                        }\n                    }\n                }\n                board.push(<div>{row}</div>);\n            }\n        }\n\n\n        return (\n            <div className=\"board-container\">\n                { board }\n            </div>\n        )\n    }\n}","/Users/RaymondChu/react-chess/client/src/helpers/InitializeChessBoard.js",[],"/Users/RaymondChu/react-chess/client/src/pieces/Queen.js",["98"],"import Piece from './Piece';\n\nexport default class Queen extends Piece {\n    constructor(player) {\n        super(player, player === 1 ? 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg' : 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg');\n        this.name = \"Queen\";\n        this.hasMoved = false;\n\n    }\n\n    handleMoved() {\n        this.hasMoved = true;\n    }\n\n    getName = () => {\n        return this.name;\n    }\n\n    isMoveValid = (initialPos, endPos) => {\n        const diff = Math.abs(endPos - initialPos);\n        return (\n            diff % 9 === 0 ||\n            diff % 8 === 0 ||\n            diff % 7 === 0 ||\n            diff < 8\n        );\n    }\n\n    getPathIndicies = (initialPos, endPos) => {\n        var indicies = [];\n        var increment;\n        const diff = Math.abs(endPos - initialPos);\n\n        if (diff % 9 === 0) {\n            increment = 9;\n        }\n\n        else if (diff % 8 === 0) {\n            increment = 8;\n        }\n\n        else if (diff % 7 === 0) {\n            increment = 7;\n        }\n\n        else {\n            increment = 1;\n        }\n\n        if (endPos > initialPos) {\n            for (var i = initialPos + increment; i < endPos; i += increment) {\n                indicies.push(i);\n            }\n        }\n\n        else {\n            for (var i = initialPos - increment; i > endPos; i -= increment) {\n                indicies.push(i);\n            }\n        }\n\n        return indicies;\n    }\n}","/Users/RaymondChu/react-chess/client/src/pieces/Rook.js",[],"/Users/RaymondChu/react-chess/client/src/components/Square.js",[],"/Users/RaymondChu/react-chess/client/src/pieces/Piece.js",[],["99","100"],"/Users/RaymondChu/react-chess/client/src/pieces/Knight.js",[],"/Users/RaymondChu/react-chess/client/src/pieces/Pawn.js",["101"],"import React from 'react';\nimport Piece from './Piece';\n\nexport default class Pawn extends Piece {\n    constructor(player) {\n        super(player, player === 1 ? 'https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg' : 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg');\n        this.initialPositions = {\n            1: [48, 49, 50, 51, 52, 53, 54, 55],\n            2: [8, 9, 10, 11, 12, 13, 14, 15]\n        }\n\n        this.name = \"Pawn\";\n        this.hasMoved = false;\n        this.doubleJump = false;\n    }\n\n    handleMoved() {\n        this.hasMoved = true;\n    }\n\n    getName = () => {\n        return this.name;\n    }\n\n    isMoveValid (initialPos, endPos, endPosOccupied) {\n        if (this.player === 1) {\n            if ((endPos === initialPos - 8 && !endPosOccupied) ) {\n                return true;\n            }\n            else if (endPos === initialPos - 16 && this.initialPositions[1].indexOf(initialPos) >= 0 && !endPosOccupied) {\n                this.doubleJump = true;\n                return true;\n            }\n            else if ((endPos === initialPos - 7 || endPos === initialPos - 9) && endPosOccupied) {\n                return true;\n            }\n        }\n\n        else {\n            if (endPos === initialPos + 8 && !endPosOccupied) {\n                return true;\n            }\n            else if (endPos === initialPos + 16 && this.initialPositions[2].indexOf(initialPos) >= 0) {\n                this.doubleJump = true;\n                return true;\n            }\n            else if ((endPos === initialPos + 7 || endPos === initialPos + 9) && endPosOccupied) {\n                return true;\n            }\n        }\n    }\n\n    getPathIndicies = (initialPos, endPos) => {\n        var indicies = [];\n\n        if (endPos - initialPos === 16) {\n            indicies.push(initialPos + 8);\n        }\n\n        else if (initialPos - endPos === 16) {\n            indicies.push(initialPos - 8);\n        }\n        \n        return indicies;\n    }\n    \n}","/Users/RaymondChu/react-chess/client/src/pieces/King.js",[],"/Users/RaymondChu/react-chess/client/src/pieces/Bishop.js",["102"],"import Piece from './Piece';\n\nexport default class Bishop extends Piece {\n    constructor(player) {\n        super(player, player === 1 ? 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg' : 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg');\n        this.name = \"Bishop\";\n        this.hasMoved = false;\n\n    }\n\n    handleMoved() {\n        this.hasMoved = true;\n    }\n\n    getName = () => {\n        return this.name;\n    }\n\n    isMoveValid = (initialPos, endPos) => {\n        const diff = Math.abs(endPos - initialPos);\n        return (\n            diff % 9 === 0 ||\n            diff % 7 === 0\n        );\n    }\n\n    getPathIndicies = (initialPos, endPos) => {\n        var indicies = [];\n        var increment;\n        const diff = Math.abs(endPos - initialPos);\n\n        if (diff % 9 === 0) {\n            increment = 9\n        }\n\n        else if (diff % 7 === 0) {\n            increment = 7\n        }\n\n        if (endPos > initialPos) {\n            for (var i = initialPos + increment; i < endPos; i += increment) {\n                indicies.push(i);\n            }\n        }\n\n        else {\n            for (var i = initialPos - increment; i > endPos; i -= increment) {\n                indicies.push(i);\n            }\n        }\n\n        return indicies;\n    }\n}","/Users/RaymondChu/react-chess/client/src/socket/socket.js",[],"/Users/RaymondChu/react-chess/client/src/components/Lobby.js",["103"],"import React, { useState, useEffect } from 'react';\nimport Game from './Game';\nimport { useParams } from 'react-router-dom';\nimport { socket } from '../socket/socket';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport '../styles/Lobby.css';\n\nexport default function Lobby(props) {\n    const [redirect, setRedirect] = useState(false);\n    const gameId = useParams().gameId;\n\n    useEffect(() => {\n        if (props.username) {\n            setRedirect(true);\n        }\n        \n    }, [])\n\n    const newPlayerJoin = () => {\n        setRedirect(true);\n        socket.emit(\"joinGameLobby\", {gameId, username: props.username});\n    }\n    return (\n        <div>\n        {\n        redirect ? \n            <div>\n                <Game username={props.username} gameId={gameId} />\n            </div>\n        :\n            <div className=\"lobby-container\">\n                <p>Enter your name to start the game!</p>\n                <TextField id=\"outlined-basic\" style={{marginBottom: '1%', width: '15vw'}} label=\"Name\" variant=\"outlined\" onChange={(event) => {props.setUsername(event.target.value)}} required />\n                <Button variant=\"contained\" color=\"primary\" onClick={() => newPlayerJoin()}>\n                    Enter\n                </Button>\n            </div>\n        }\n        </div>\n\n    )\n}","/Users/RaymondChu/react-chess/client/src/components/Navbar.js",["104"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Play Chess Online\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","/Users/RaymondChu/react-chess/client/src/components/Chat.js",[],"/Users/RaymondChu/react-chess/client/src/components/Message.js",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":2,"column":8,"nodeType":"111","messageId":"112","endLine":2,"endColumn":12},{"ruleId":"109","severity":1,"message":"113","line":20,"column":12,"nodeType":"111","messageId":"112","endLine":20,"endColumn":21},{"ruleId":"109","severity":1,"message":"114","line":20,"column":23,"nodeType":"111","messageId":"112","endLine":20,"endColumn":35},{"ruleId":"115","severity":1,"message":"116","line":44,"column":8,"nodeType":"117","endLine":44,"endColumn":10,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":299,"column":17,"nodeType":"111","messageId":"121","endLine":299,"endColumn":25},{"ruleId":"119","severity":1,"message":"122","line":46,"column":22,"nodeType":"111","messageId":"121","endLine":46,"endColumn":23},{"ruleId":"119","severity":1,"message":"123","line":47,"column":21,"nodeType":"111","messageId":"121","endLine":47,"endColumn":24},{"ruleId":"119","severity":1,"message":"124","line":48,"column":26,"nodeType":"111","messageId":"121","endLine":48,"endColumn":27},{"ruleId":"119","severity":1,"message":"122","line":57,"column":22,"nodeType":"111","messageId":"121","endLine":57,"endColumn":23},{"ruleId":"105","replacedBy":"125"},{"ruleId":"107","replacedBy":"126"},{"ruleId":"109","severity":1,"message":"127","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":13},{"ruleId":"119","severity":1,"message":"122","line":47,"column":22,"nodeType":"111","messageId":"121","endLine":47,"endColumn":23},{"ruleId":"115","severity":1,"message":"128","line":19,"column":8,"nodeType":"117","endLine":19,"endColumn":10,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"130","line":6,"column":8,"nodeType":"111","messageId":"112","endLine":6,"endColumn":14},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","'playerOne' is assigned a value but never used.","'setPlayerOne' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.gameId'. Either include it or remove the dependency array.","ArrayExpression",["133"],"no-redeclare","'nextTurn' is already defined.","redeclared","'i' is already defined.","'row' is already defined.","'j' is already defined.",["131"],["132"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'props.username'. Either include it or remove the dependency array.",["134"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [props.gameId]",{"range":"139","text":"140"},"Update the dependencies array to be: [props.username]",{"range":"141","text":"142"},[1404,1406],"[props.gameId]",[541,543],"[props.username]"]