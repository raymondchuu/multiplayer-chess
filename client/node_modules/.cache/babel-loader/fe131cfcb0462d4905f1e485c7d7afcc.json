{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport queryString from 'query-string';\nimport { socket } from '../socket/socket';\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      king1InCheck: false,\n      isRoomFull: false,\n      roomNames: []\n    };\n  }\n\n  componentDidMount() {\n    socket.on(\"start game\", users => {\n      this.setState({\n        isRoomFull: true,\n        roomNames: users\n      });\n    });\n  }\n\n  handleEnPassant(squares, index) {\n    if (this.state.playerTurn === 1) {\n      //left en passant\n      if (index === this.state.selectedIndex - 9) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index + 8] = null;\n      } //right en passant\n\n\n      if (index === this.state.selectedIndex - 7) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index + 8] = null;\n      }\n    } else {\n      //left en passant\n      if (index === this.state.selectedIndex + 7) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index - 8] = null;\n      } //right en passant\n\n\n      if (index === this.state.selectedIndex + 9) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index - 8] = null;\n      }\n    }\n\n    return squares;\n  }\n\n  checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    };\n    const otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n\n    if (squares[this.state.selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 1) {\n      //left en passant\n      console.log(\"first check\");\n      console.log(squares[this.state.selectedIndex - 9] === index);\n\n      if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex - 9) {\n        console.log(\"second check\");\n        return true;\n      }\n\n      if (squares[this.state.selectedIndex + 1] !== null && squares[this.state.selectedIndex + 1].name === \"Pawn\" && squares[this.state.selectedIndex + 1].player === otherPlayer && squares[this.state.selectedIndex + 1].doubleJump && index === this.state.selectedIndex - 7) {\n        return true;\n      }\n    }\n\n    if (squares[this.state.selectedIndex].getName() === \"Pawn\" && enPassantPositions[2].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 2) {\n      if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 7) {\n        return true;\n      }\n\n      if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 9) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isMyKinginCheck(squares, check) {\n    return new Promise((resolve, reject) => {\n      var kingIndex = -1;\n      var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n\n      for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === this.state.playerTurn) {\n          kingIndex = i;\n        }\n      }\n\n      var found = false;\n      console.log(kingIndex);\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === otherPlayer) {\n          const validMove = squares[j].isMoveValid(j, kingIndex, true);\n          const path = squares[j].getPathIndicies(j, kingIndex);\n\n          if (validMove) {\n            const validPath = this.checkValidPath(squares, path);\n            console.log(j, kingIndex, squares[42]);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: 'red'\n        };\n        check = true;\n      } else {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: null\n        };\n        check = false;\n      }\n\n      resolve(check);\n    });\n  }\n\n  checkValidPath(squares, path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            } else {\n              return false;\n            }\n          }\n        } //Long castle\n\n\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n    var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n    console.log(index); //highlight chess piece\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#575E6B\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        }; // castling king and rook\n\n        if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n          const newSquares = this.checkCastle(squares, index);\n\n          if (newSquares) {\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            });\n          } else {\n            console.log(\"invalid move\");\n            this.setState({\n              selectedIndex: -1\n            });\n          }\n        } //en passant\n        else if (this.checkEnPassant(squares, index)) {\n            const newSquares = this.handleEnPassant(squares, index);\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            });\n          } //if destination of piece is clicked on own piece\n          else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n              console.log(\"That's your own piece wtf\");\n              this.setState({\n                squares: squares,\n                selectedIndex: -1\n              });\n            } // if destination is not on own piece\n            else {\n                const lastRows = {\n                  1: [0, 1, 2, 3, 4, 5, 6, 7],\n                  2: [56, 57, 58, 59, 60, 61, 62, 63]\n                };\n                const isSquareOccupied = squares[index] === null ? false : true;\n                const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n                const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n                if (validMove) {\n                  const validPath = this.checkValidPath(squares, pathIndicies);\n\n                  if (validPath) {\n                    squares[index] = squares[this.state.selectedIndex];\n                    squares[index].handleMoved();\n                    squares[this.state.selectedIndex] = null;\n                    console.log(squares[index]); // pawn to queen\n\n                    if (squares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                      squares[index] = null;\n                      squares[index] = new Queen(1);\n                    }\n\n                    if (squares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                      squares[index] = null;\n                      squares[index] = new Queen(2);\n                    } // check if king is in check with shallow copied board\n\n\n                    this.isMyKinginCheck(squares).then(check => {\n                      console.log(check);\n\n                      if (check) {\n                        console.log(\"Move your king white!\");\n                        squares[this.state.selectedIndex] = squares[index];\n                        squares[index] = null;\n                        this.setState({\n                          squares: squares,\n                          selectedIndex: -1,\n                          king1InCheck: check\n                        });\n                      } else {\n                        this.setState({\n                          playerTurn: nextTurn,\n                          selectedIndex: -1,\n                          squares: squares\n                        }, () => {\n                          socket.emit('move', {\n                            move: squares\n                          });\n                        });\n                      }\n                    }).catch(err => {\n                      console.log(err);\n                    });\n                  } else {\n                    console.log(\"invalid path\", pathIndicies);\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1\n                    });\n                  }\n                } else {\n                  console.log(\"invalid move\");\n                  this.setState({\n                    squares: squares,\n                    selectedIndex: -1\n                  });\n                }\n              }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: this.state.roomNames.length === 2 ? /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: index => this.handleClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Welcome to online chess! Send this link with a friend to start your chess game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: window.location,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Waiting for game to start ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.isRoomFull\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/Game.js"],"names":["React","Board","initializeChessBoard","Rook","Queen","queryString","socket","Game","Component","constructor","state","squares","playerTurn","selectedIndex","king1InCheck","isRoomFull","roomNames","componentDidMount","on","users","setState","handleEnPassant","index","checkEnPassant","enPassantPositions","otherPlayer","name","indexOf","console","log","player","doubleJump","getName","isMyKinginCheck","check","Promise","resolve","reject","kingIndex","i","length","found","j","validMove","isMoveValid","path","getPathIndicies","validPath","checkValidPath","style","backgroundColor","valid","checkRook","moved","checkCastle","handleMoved","handleClick","slice","nextTurn","newSquares","lastRows","isSquareOccupied","pathIndicies","then","emit","move","catch","err","render","window","location"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport queryString from 'query-string';\nimport { socket } from '../socket/socket';\n\nexport default class Game extends React.Component {\n    constructor() {\n        super();\n    \n        this.state = {\n          squares: initializeChessBoard(),\n          playerTurn: 1,\n          selectedIndex: -1,\n          king1InCheck: false,\n          isRoomFull: false,\n          roomNames: []\n        }\n    }\n\n    componentDidMount() {\n      socket.on(\"start game\", (users) => {\n        this.setState({\n          isRoomFull: true,\n          roomNames: users\n        });\n      })\n    }\n\n    handleEnPassant(squares, index) {\n        if (this.state.playerTurn === 1) {\n          //left en passant\n          if (index === this.state.selectedIndex - 9) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        \n          //right en passant\n          if (index === this.state.selectedIndex - 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        }\n    \n        else {\n          //left en passant\n          if (index === this.state.selectedIndex + 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n    \n          //right en passant\n          if (index === this.state.selectedIndex + 9) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n        }\n    \n        return squares;\n    }\n    \n    checkEnPassant(squares, index) {\n        const enPassantPositions = {\n          1: [24, 25, 26, 27, 28, 29, 30, 31],\n          2: [32, 33, 34, 35, 36, 37, 38, 39]\n        }\n        const otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n    \n        if (squares[this.state.selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 1) {\n          //left en passant\n          console.log(\"first check\");\n          console.log(squares[this.state.selectedIndex - 9] === index);\n          if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex - 9) {\n            console.log(\"second check\");\n            return true;\n          }\n          if (squares[this.state.selectedIndex + 1] !== null && squares[this.state.selectedIndex + 1].name === \"Pawn\" && squares[this.state.selectedIndex + 1].player === otherPlayer && squares[this.state.selectedIndex + 1].doubleJump && index === this.state.selectedIndex - 7) {\n            return true;\n          }\n        }\n    \n        if (squares[this.state.selectedIndex].getName() === \"Pawn\" && enPassantPositions[2].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 2) {\n          if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 7) {\n            return true;\n          }      \n          if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 9) {\n            return true;\n          }\n        }\n    \n        return false;\n    }\n    \n    isMyKinginCheck(squares, check) {\n        return new Promise((resolve, reject) => {\n    \n        var kingIndex = -1;\n        var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n        for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n          if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === this.state.playerTurn) {\n            kingIndex = i;\n          }\n        }\n        \n        var found = false;\n        console.log(kingIndex);\n    \n        for (var j = 0; j < squares.length && !found; ++j) {\n          if (squares[j] !== null && squares[j].player === otherPlayer) {\n            const validMove = squares[j].isMoveValid(j, kingIndex, true);\n            const path = squares[j].getPathIndicies(j, kingIndex);\n            if (validMove) {\n              const validPath = this.checkValidPath(squares, path);\n              console.log(j, kingIndex, squares[42])\n              if (validPath) {\n                found = true;\n              }\n            }\n          }\n        }\n    \n        if (found) {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: 'red'}\n          check = true;\n        }\n        else {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null}\n          check = false;\n        }\n        resolve(check);\n      })\n    }\n    \n    checkValidPath(squares, path) {\n        var valid = true;\n        \n        for (var i = 0; i < path.length && valid; ++i) {\n          if (squares[path[i]] !== null) {\n            valid = false;\n          }\n        }\n    \n        return valid;\n    }\n    \n    checkRook(squares, index) {\n        if (index === 6 || index === 62) {\n          if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n            return true;\n          }\n        }\n    \n        if (index === 2 || index === 58) {\n          if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n            return true;\n          }\n        }\n    }\n    \n    checkCastle(squares, index) {\n        if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n          if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n            //short castle\n            if (index === 62) {\n              if (this.checkRook(squares, index)) {\n                if (squares[61] === null && squares[62] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[61] = new Rook(1);\n                  squares[63] = null;\n                }\n    \n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 6) {\n              if (this.checkRook(squares, index)) {\n                if (squares[5] === null && squares[6] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[5] = new Rook(2);\n                  squares[7] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            //Long castle\n            if (index === 2) {\n              if (this.checkRook(squares, index)) {\n                if (squares[1] === null && squares[2] === null && squares[3] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[3] = new Rook(2);\n                  squares[0] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 58) {\n              if (this.checkRook(squares, index)) {\n                if (squares[57] === null && squares[58] === null && squares[59] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[59] = new Rook(1);\n                  squares[56] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            return squares;\n          }\n        }\n    }\n    \n    \n    handleClick(index) {\n        //shallow copy squares \n        const squares = this.state.squares.slice();\n        var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n    \n        console.log(index);\n        //highlight chess piece\n        if (this.state.selectedIndex < 0) {\n          if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n            squares[index].style = {...squares[index].style, backgroundColor: \"#575E6B\" };\n            this.setState({\n              squares: squares,\n              selectedIndex: index\n            });\n          }\n          else {\n            console.log(\"That is not your piece\");\n          }\n        }\n    \n        //piece has been selected\n        else {\n          squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null};\n    \n          // castling king and rook\n          if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = this.checkCastle(squares, index);\n            if (newSquares) {\n              this.setState({\n                squares: newSquares,\n                selectedIndex: -1,\n                playerTurn: nextTurn\n              })\n            }\n            else {\n              console.log(\"invalid move\");\n              this.setState({\n                selectedIndex: -1\n    \n              })\n            }\n          }\n    \n          //en passant\n          else if (this.checkEnPassant(squares, index)) {\n            const newSquares = this.handleEnPassant(squares, index);\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            }) \n          }\n    \n          //if destination of piece is clicked on own piece\n          else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            this.setState({\n              squares: squares, \n              selectedIndex: -1\n            })\n          }\n    \n          // if destination is not on own piece\n          else {\n            const lastRows = {\n              1: [0, 1, 2, 3, 4, 5, 6, 7],\n              2: [56, 57, 58, 59, 60, 61, 62, 63]\n            };\n            const isSquareOccupied = squares[index] === null ? false : true;\n            const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n            const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n            if (validMove) {\n              const validPath = this.checkValidPath(squares, pathIndicies);\n              if (validPath) {\n                squares[index] = squares[this.state.selectedIndex];\n                squares[index].handleMoved();\n                squares[this.state.selectedIndex] = null;\n                console.log(squares[index]);\n    \n                // pawn to queen\n                if (squares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                  squares[index] = null;\n                  squares[index] = new Queen(1);\n                }\n                if (squares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                  squares[index] = null;\n                  squares[index] = new Queen(2);\n                }\n    \n                // check if king is in check with shallow copied board\n                this.isMyKinginCheck(squares)\n                .then((check) =>{\n                  console.log(check);\n                  if (check) {\n                    console.log(\"Move your king white!\");\n                    squares[this.state.selectedIndex] = squares[index];\n                    squares[index] = null\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1,\n                      king1InCheck: check\n                    })\n                  }\n                  else {\n                    this.setState({\n                      playerTurn: nextTurn,\n                      selectedIndex: -1,\n                      squares: squares\n                    }, () => {\n                      socket.emit('move', {\n                        move: squares\n                      });\n                    }                    \n                    );\n\n\n                  }\n                }) \n                .catch((err) => {\n                  console.log(err);\n                })        \n              }\n              else {\n                console.log(\"invalid path\", pathIndicies);\n                this.setState({\n                  squares: squares, \n                  selectedIndex: -1\n                });\n              }\n            }\n            else {\n              console.log(\"invalid move\");\n              this.setState({\n                squares: squares, \n                selectedIndex: -1\n              });\n            }\n          }      \n        }\n    }\n    render() {\n        return (\n          <div className=\"Game\">\n            {\n              this.state.roomNames.length === 2 ? \n              <Board \n              squares={this.state.squares}\n              onClick={(index) => this.handleClick(index)}\n              />\n              :\n              <div>\n              <div>\n              Welcome to online chess! Send this link with a friend to start your chess game\n              </div>\n              \n              <div>\n                  <input type=\"text\" value={window.location} disabled />\n              </div>\n\n              <div>\n                  <p>Waiting for game to start ...</p>\n                  <p>{this.state.isRoomFull}</p>\n              </div>\n              </div>\n            }\n\n          </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}