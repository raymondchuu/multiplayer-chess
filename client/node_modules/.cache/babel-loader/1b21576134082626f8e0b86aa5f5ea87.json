{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/src/components/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport '../App.css';\nimport Rook from '../pieces/Rook';\nimport Square from './Square';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      king1InCheck: false,\n      king2InCheck: false\n    };\n  }\n\n  handleEnPassant(squares) {}\n\n  checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    };\n\n    if (squares[this.state.selectedIndex].getName() === \"Pawn\" && enPassantPositions[1].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 1) {\n      return true;\n    }\n\n    if (squares[this.state.selectedIndex].getName() === \"Pawn\" && enPassantPositions[2].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 2) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isMyKinginCheck(squares, check) {\n    return new Promise((resolve, reject) => {\n      var kingIndex = -1;\n      var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n\n      for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === this.state.playerTurn) {\n          kingIndex = i;\n        }\n      }\n\n      var found = false;\n      console.log(kingIndex);\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === otherPlayer) {\n          const validMove = squares[j].isMoveValid(j, kingIndex, true);\n          const path = squares[j].getPathIndicies(j, kingIndex);\n\n          if (validMove) {\n            const validPath = this.checkValidPath(squares, path);\n            console.log(j, kingIndex, squares[42]);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: 'red'\n        };\n        check = true;\n      } else {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: null\n        };\n        check = false;\n      }\n\n      resolve(check);\n    });\n  }\n\n  checkValidPath(squares, path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            } else {\n              return false;\n            }\n          }\n        } //Long castle\n\n\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n    console.log(index); //highlight chess piece\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#575E6B\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        };\n\n        if (this.state.kingInCheck) {\n          var check = this.isKinginCheck(index, squares);\n\n          if (check) {\n            this.handleClick(index);\n          }\n        } else {\n          // castling king and rook\n          if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = this.checkCastle(squares, index);\n\n            if (newSquares) {\n              var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n              this.setState({\n                squares: newSquares,\n                selectedIndex: -1,\n                playerTurn: nextTurn\n              });\n            } else {\n              console.log(\"invalid move\");\n              this.setState({\n                selectedIndex: -1\n              });\n            }\n          } //en passant\n          else if (squares[this.state.selectedIndex].getName() === \"Pawn\" && (squares[index] === this.state.selectedIndex + 7 || squares[index] === this.state.selectedIndex - 7 || squares[index] === this.state.selectedIndex + 9 || squares[index] === this.state.selectedIndex - 9) && squares[index] === null) {\n              var leftPawnPos = false;\n              var rightPawnPos = false;\n              console.log(\"enpassant\");\n\n              if (squares[this.state.selectedIndex + 1].getName() === \"Pawn\" && squares[this.state.selectedIndex + 1].player !== this.state.playerTurn) {\n                rightPawnPos = this.state.selectedIndex + 1;\n              }\n\n              if (squares[this.state.selectedIndex - 1].getName() === \"Pawn\" && squares[this.state.selectedIndex - 1].player !== this.state.playerTurn) {\n                leftPawnPos = this.state.selectedIndex - 1;\n              }\n\n              const validPassant = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, false, leftPawnPos, rightPawnPos);\n\n              if (validPassant) {\n                if (index === this.state.selectedIndex - 9 || index === this.state.selectedIndex - 7) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[this.state.selectedIndex] = null;\n                  squares[index + 8] = null;\n                } else if (index === this.state.selectedIndex + 9 || this.state.selectedIndex + 7) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[this.state.selectedIndex] = null;\n                  squares[index - 8] = null;\n                }\n              }\n            } //if destination of piece is clicked on own piece\n            else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n                console.log(\"That's your own piece wtf\");\n                this.setState({\n                  squares: squares,\n                  selectedIndex: -1\n                });\n              } // if destination is not on own piece\n              else {\n                  const isSquareOccupied = squares[index] === null ? false : true;\n                  const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n                  const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n                  if (validMove) {\n                    const validPath = this.checkValidPath(squares, pathIndicies);\n\n                    if (validPath) {\n                      squares[index] = squares[this.state.selectedIndex];\n                      squares[index].handleMoved();\n                      squares[this.state.selectedIndex] = null;\n                      console.log(squares[index]);\n                      var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n                      var check = this.state.king1InCheck; // check if king is in check with shallow copied board\n\n                      this.isMyKinginCheck(squares).then(check => {\n                        console.log(check);\n\n                        if (check) {\n                          console.log(\"Move your king white!\");\n                          squares[this.state.selectedIndex] = squares[index];\n                          squares[index] = null;\n                          this.setState({\n                            squares: squares,\n                            selectedIndex: -1,\n                            king1InCheck: check\n                          });\n                        } else {\n                          this.setState({\n                            playerTurn: nextTurn,\n                            selectedIndex: -1,\n                            squares: squares\n                          });\n                        }\n                      }).catch(err => {\n                        console.log(err);\n                      }); //           this.isEnemyKinginCheck(index, squares);\n                    } else {\n                      console.log(\"invalid path\", pathIndicies);\n                      this.setState({\n                        squares: squares,\n                        selectedIndex: -1\n                      });\n                    }\n                  } else {\n                    console.log(\"invalid move\");\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1\n                    });\n                  }\n                }\n        }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: index => this.handleClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/src/components/App.js"],"names":["React","Board","initializeChessBoard","Rook","Square","App","Component","constructor","state","squares","playerTurn","selectedIndex","king1InCheck","king2InCheck","handleEnPassant","checkEnPassant","index","enPassantPositions","getName","indexOf","isMyKinginCheck","check","Promise","resolve","reject","kingIndex","otherPlayer","i","length","player","found","console","log","j","validMove","isMoveValid","path","getPathIndicies","validPath","checkValidPath","style","backgroundColor","valid","checkRook","moved","checkCastle","handleMoved","handleClick","slice","setState","kingInCheck","isKinginCheck","newSquares","nextTurn","leftPawnPos","rightPawnPos","validPassant","isSquareOccupied","pathIndicies","then","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\n\nimport '../App.css';\nimport Rook from '../pieces/Rook';\nimport Square from './Square';\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      king1InCheck: false,\n      king2InCheck: false\n    }\n  }\n\n  handleEnPassant(squares) {\n\n  }\n\n  checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    }\n\n    if (squares[this.state.selectedIndex].getName() === \"Pawn\" && enPassantPositions[1].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 1) {\n      return true;\n    }\n\n    if (squares[this.state.selectedIndex].getName() === \"Pawn\" && enPassantPositions[2].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 2) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isMyKinginCheck(squares, check) {\n    return new Promise((resolve, reject) => {\n\n    var kingIndex = -1;\n    var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n    for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n      if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === this.state.playerTurn) {\n        kingIndex = i;\n      }\n    }\n    \n    var found = false;\n    console.log(kingIndex);\n\n    for (var j = 0; j < squares.length && !found; ++j) {\n      if (squares[j] !== null && squares[j].player === otherPlayer) {\n        const validMove = squares[j].isMoveValid(j, kingIndex, true);\n        const path = squares[j].getPathIndicies(j, kingIndex);\n        if (validMove) {\n          const validPath = this.checkValidPath(squares, path);\n          console.log(j, kingIndex, squares[42])\n          if (validPath) {\n            found = true;\n          }\n        }\n      }\n    }\n\n    if (found) {\n      squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: 'red'}\n      check = true;\n    }\n    else {\n      squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null}\n      check = false;\n    }\n    resolve(check);\n  })\n  }\n\n  checkValidPath(squares, path) {\n    var valid = true;\n    \n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            }\n\n            else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        //Long castle\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n\n    console.log(index);\n    //highlight chess piece\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n        squares[index].style = {...squares[index].style, backgroundColor: \"#575E6B\" };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      }\n      else {\n        console.log(\"That is not your piece\");\n      }\n    }\n\n    //piece has been selected\n    else {\n      squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null};\n\n      if (this.state.kingInCheck) {\n        var check = this.isKinginCheck(index, squares);\n        if (check) {\n          this.handleClick(index);\n        }\n      }\n      else {\n\n      \n      // castling king and rook\n      if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n        const newSquares = this.checkCastle(squares, index);\n        if (newSquares) {\n          var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n          this.setState({\n            squares: newSquares,\n            selectedIndex: -1,\n            playerTurn: nextTurn\n          })\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            selectedIndex: -1\n\n          })\n        }\n      }\n\n      //en passant\n      else if (squares[this.state.selectedIndex].getName() === \"Pawn\" && (squares[index] === this.state.selectedIndex + 7 || squares[index] === this.state.selectedIndex - 7 || squares[index] === this.state.selectedIndex + 9 || squares[index] === this.state.selectedIndex - 9) && squares[index] === null) {\n        var leftPawnPos = false;\n        var rightPawnPos = false;\n        console.log(\"enpassant\");\n        if (squares[this.state.selectedIndex + 1].getName() === \"Pawn\" && squares[this.state.selectedIndex + 1].player !== this.state.playerTurn) {\n          rightPawnPos = this.state.selectedIndex + 1;\n        }\n        if (squares[this.state.selectedIndex - 1].getName() === \"Pawn\" && squares[this.state.selectedIndex - 1].player !== this.state.playerTurn) {\n          leftPawnPos = this.state.selectedIndex - 1;\n        }\n        const validPassant = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, false, leftPawnPos, rightPawnPos);\n\n        if (validPassant) {\n          if (index === this.state.selectedIndex - 9 || index === this.state.selectedIndex - 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n\n          else if (index === this.state.selectedIndex + 9 || this.state.selectedIndex + 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n\n        }\n      }\n\n      //if destination of piece is clicked on own piece\n      else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n        console.log(\"That's your own piece wtf\");\n        this.setState({\n          squares: squares, \n          selectedIndex: -1\n        })\n      }\n\n      // if destination is not on own piece\n      else {\n        const isSquareOccupied = squares[index] === null ? false : true;\n        const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n        const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n        if (validMove) {\n          const validPath = this.checkValidPath(squares, pathIndicies);\n          if (validPath) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[index].handleMoved();\n            squares[this.state.selectedIndex] = null;\n            console.log(squares[index]);\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            var check = this.state.king1InCheck;\n            // check if king is in check with shallow copied board\n            this.isMyKinginCheck(squares)\n            .then((check) =>{\n              console.log(check);\n              if (check) {\n                console.log(\"Move your king white!\");\n                squares[this.state.selectedIndex] = squares[index];\n                squares[index] = null\n                this.setState({\n                  squares: squares,\n                  selectedIndex: -1,\n                  king1InCheck: check\n                })\n              }\n              else {\n                this.setState({\n                  playerTurn: nextTurn,\n                  selectedIndex: -1,\n                  squares: squares\n                });\n              }\n            }) \n            .catch((err) => {\n              console.log(err);\n            })\n          \n\n //           this.isEnemyKinginCheck(index, squares);\n\n            \n            \n          }\n          else {\n            console.log(\"invalid path\", pathIndicies);\n            this.setState({\n              squares: squares, \n              selectedIndex: -1\n            });\n          }\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            squares: squares, \n            selectedIndex: -1\n          });\n        }\n      }\n    }\n  }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board \n          squares={this.state.squares}\n          onClick={(index) => this.handleClick(index)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}