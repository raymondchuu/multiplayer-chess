{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport queryString from 'query-string';\nimport { socket } from '../socket/socket';\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      king1InCheck: false,\n      player1: \"\",\n      player2: \"\",\n      usernames: [],\n      start: false,\n      validMove: false\n    };\n  }\n\n  componentDidMount() {\n    socket.emit(\"shouldGameStart\", this.props.gameId);\n    console.log(\"shouldgamestart emitted!\");\n    socket.on(\"start game\", users => {\n      this.setState({\n        start: true,\n        player1: users[0],\n        player2: users[1],\n        usernames: users\n      });\n    });\n    /*       socket.on(\"userMove\", (state) => {\n            this.setState({\n              squares: state.squares,\n              selectedIndex: state.selectedIndex,\n              playerTurn: state.playerTurn,\n            }, console.log(this.state));\n          })  */\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //      if (this.state.validMove !== prevState.validMove) {\n    console.log(\"componentDidUpdate\");\n    console.log(this.state);\n    socket.on('userMove', state => {\n      console.log(state);\n      var tempSquares = this.state.squares.slice();\n      tempSquares[state.destinationIndex] = tempSquares[this.state.selectedIndex];\n      tempSquares[this.state.selectedIndex] = null;\n      this.setState({\n        squares: tempSquares,\n        selectedIndex: -1,\n        validMove: false,\n        playerTurn: this.state.playerTurn === 1 ? 2 : 1\n      });\n    }); //    }\n\n    /*       console.log(\"componentdidupdate\");\n          var tempSquares = this.state.squares.slice();\n          var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n    \n          socket.on('userMove', (state) => {\n            this.setState({\n              endIndex: state.endIndex\n            });\n            console.log(tempSquares);\n            console.log(this.state.endIndex);\n            console.log(this.state.selectedIndex);\n            console.log(tempSquares[this.state.selectedIndex]);\n            tempSquares[this.state.endIndex] = tempSquares[this.state.selectedIndex];\n            tempSquares[this.state.selectedIndex] = null;\n            \n            this.setState({\n              squares: tempSquares,\n              playerTurn: nextTurn,\n              selectedIndex: -1,\n              endIndex: -1,\n              validMove: false\n            })\n          }); */\n  }\n\n  handleEnPassant(squares, index) {\n    if (this.state.playerTurn === 1) {\n      //left en passant\n      if (index === this.state.selectedIndex - 9) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index + 8] = null;\n      } //right en passant\n\n\n      if (index === this.state.selectedIndex - 7) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index + 8] = null;\n      }\n    } else {\n      //left en passant\n      if (index === this.state.selectedIndex + 7) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index - 8] = null;\n      } //right en passant\n\n\n      if (index === this.state.selectedIndex + 9) {\n        squares[index] = squares[this.state.selectedIndex];\n        squares[this.state.selectedIndex] = null;\n        squares[index - 8] = null;\n      }\n    }\n\n    return squares;\n  }\n\n  checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    };\n    const otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n\n    if (squares[this.state.selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 1) {\n      //left en passant\n      console.log(\"first check\");\n      console.log(squares[this.state.selectedIndex - 9] === index);\n\n      if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex - 9) {\n        console.log(\"second check\");\n        return true;\n      }\n\n      if (squares[this.state.selectedIndex + 1] !== null && squares[this.state.selectedIndex + 1].name === \"Pawn\" && squares[this.state.selectedIndex + 1].player === otherPlayer && squares[this.state.selectedIndex + 1].doubleJump && index === this.state.selectedIndex - 7) {\n        return true;\n      }\n    }\n\n    if (squares[this.state.selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 2) {\n      if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 7) {\n        return true;\n      }\n\n      if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 9) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isMyKinginCheck(squares, check) {\n    return new Promise((resolve, reject) => {\n      var kingIndex = -1;\n      var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n\n      for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === this.state.playerTurn) {\n          kingIndex = i;\n        }\n      }\n\n      var found = false;\n      console.log(kingIndex);\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === otherPlayer) {\n          const validMove = squares[j].isMoveValid(j, kingIndex, true);\n          const path = squares[j].getPathIndicies(j, kingIndex);\n\n          if (validMove) {\n            const validPath = this.checkValidPath(squares, path);\n            console.log(j, kingIndex, squares[42]);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: 'red'\n        };\n        check = true;\n      } else {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: null\n        };\n        check = false;\n      }\n\n      resolve(check);\n    });\n  }\n\n  checkValidPath(squares, path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            } else {\n              return false;\n            }\n          }\n        } //Long castle\n\n\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n    console.log(index); //highlight chess piece\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#575E6B\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        }; // castling king and rook\n\n        if (squares[this.state.selectedIndex] !== null && squares[this.state.selectedIndex].name === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n          const newSquares = this.checkCastle(squares, index);\n\n          if (newSquares) {\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            });\n          } else {\n            console.log(\"invalid move\");\n            this.setState({\n              selectedIndex: -1\n            });\n          }\n        } //en passant\n        else if (this.checkEnPassant(squares, index)) {\n            const newSquares = this.handleEnPassant(squares, index);\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            });\n          } //if destination of piece is clicked on own piece\n          else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n              console.log(\"That's your own piece wtf\");\n              this.setState({\n                squares: squares,\n                selectedIndex: -1\n              });\n            } // if destination is not on own piece\n            else {\n                console.log(squares[this.state.selectedIndex]);\n                const lastRows = {\n                  1: [0, 1, 2, 3, 4, 5, 6, 7],\n                  2: [56, 57, 58, 59, 60, 61, 62, 63]\n                };\n                const isSquareOccupied = squares[index] === null ? false : true;\n                const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n                const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n                if (validMove) {\n                  const validPath = this.checkValidPath(squares, pathIndicies);\n\n                  if (validPath) {\n                    squares[index] = squares[this.state.selectedIndex];\n                    squares[index].handleMoved();\n                    squares[this.state.selectedIndex] = null;\n                    console.log(squares[index]); // pawn to queen\n\n                    if (squares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                      squares[index] = null;\n                      squares[index] = new Queen(1);\n                    }\n\n                    if (squares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                      squares[index] = null;\n                      squares[index] = new Queen(2);\n                    } // check if king is in check with shallow copied board\n\n\n                    this.isMyKinginCheck(squares).then(check => {\n                      console.log(check);\n\n                      if (check) {\n                        console.log(\"Move your king white!\");\n                        squares[this.state.selectedIndex] = squares[index];\n                        squares[index] = null;\n                        this.setState({\n                          squares: squares,\n                          selectedIndex: -1,\n                          king1InCheck: check\n                        });\n                      } else {\n                        var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n                        console.log(index);\n                        this.setState({\n                          validMove: true\n                        });\n                        socket.emit('move', {\n                          destinationIndex: index,\n                          gameId: this.props.gameId\n                        });\n                        /*                     socket.emit('move', {\n                                              selectedIndex: -1,\n                                              playerTurn: nextTurn,\n                                              squares: squares,\n                                              gameId: this.props.gameId\n                                            }) */\n\n                        /*                     socket.emit('move', {\n                                              endIndex: index,\n                                              gameId: this.props.gameId,\n                                            }) */\n                      }\n                    }).catch(err => {\n                      console.log(err);\n                    });\n                  } else {\n                    console.log(\"invalid path\", pathIndicies);\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1\n                    });\n                  }\n                } else {\n                  console.log(\"invalid move\");\n                  this.setState({\n                    squares: squares,\n                    selectedIndex: -1\n                  });\n                }\n              }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: this.state.start ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.player2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: index => this.handleClick(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.player1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Welcome to online chess! Send this link with a friend to start your chess game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: window.location,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Waiting for game to start ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 11\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/Game.js"],"names":["React","Board","initializeChessBoard","Rook","Queen","queryString","socket","Game","Component","constructor","state","squares","playerTurn","selectedIndex","king1InCheck","player1","player2","usernames","start","validMove","componentDidMount","emit","props","gameId","console","log","on","users","setState","componentDidUpdate","prevProps","prevState","tempSquares","slice","destinationIndex","handleEnPassant","index","checkEnPassant","enPassantPositions","otherPlayer","name","indexOf","player","doubleJump","isMyKinginCheck","check","Promise","resolve","reject","kingIndex","i","length","found","j","isMoveValid","path","getPathIndicies","validPath","checkValidPath","style","backgroundColor","valid","checkRook","moved","checkCastle","handleMoved","handleClick","newSquares","nextTurn","lastRows","isSquareOccupied","pathIndicies","then","catch","err","render","window","location"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport queryString from 'query-string';\nimport { socket } from '../socket/socket';\n\nexport default class Game extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n        squares: initializeChessBoard(),\n        playerTurn: 1,\n        selectedIndex: -1,\n        king1InCheck: false,\n        player1: \"\",\n        player2: \"\",\n        usernames: [],\n        start: false,\n        validMove: false,\n      }\n    }\n\n    componentDidMount() {\n      socket.emit(\"shouldGameStart\", this.props.gameId);\n      console.log(\"shouldgamestart emitted!\");\n\n      socket.on(\"start game\", (users) => {\n        this.setState({\n          start: true,\n          player1: users[0],\n          player2: users[1],\n          usernames: users\n        });\n      });\n\n\n\n/*       socket.on(\"userMove\", (state) => {\n        this.setState({\n          squares: state.squares,\n          selectedIndex: state.selectedIndex,\n          playerTurn: state.playerTurn,\n        }, console.log(this.state));\n      })  */\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n//      if (this.state.validMove !== prevState.validMove) {\n        console.log(\"componentDidUpdate\");\n        console.log(this.state);\n        socket.on('userMove', (state) => {\n          console.log(state);\n          var tempSquares = this.state.squares.slice();\n          tempSquares[state.destinationIndex] = tempSquares[this.state.selectedIndex];\n          tempSquares[this.state.selectedIndex] = null;\n  \n          this.setState({\n            squares: tempSquares,\n            selectedIndex: -1,\n            validMove: false,\n            playerTurn: this.state.playerTurn === 1 ? 2 : 1,\n          });\n        })\n\n  //    }\n/*       console.log(\"componentdidupdate\");\n      var tempSquares = this.state.squares.slice();\n      var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n\n      socket.on('userMove', (state) => {\n        this.setState({\n          endIndex: state.endIndex\n        });\n        console.log(tempSquares);\n        console.log(this.state.endIndex);\n        console.log(this.state.selectedIndex);\n        console.log(tempSquares[this.state.selectedIndex]);\n        tempSquares[this.state.endIndex] = tempSquares[this.state.selectedIndex];\n        tempSquares[this.state.selectedIndex] = null;\n        \n        this.setState({\n          squares: tempSquares,\n          playerTurn: nextTurn,\n          selectedIndex: -1,\n          endIndex: -1,\n          validMove: false\n        })\n      }); */\n    }\n\n    handleEnPassant(squares, index) {\n        if (this.state.playerTurn === 1) {\n          //left en passant\n          if (index === this.state.selectedIndex - 9) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        \n          //right en passant\n          if (index === this.state.selectedIndex - 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        }\n    \n        else {\n          //left en passant\n          if (index === this.state.selectedIndex + 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n    \n          //right en passant\n          if (index === this.state.selectedIndex + 9) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n        }\n    \n        return squares;\n    }\n    \n    checkEnPassant(squares, index) {\n        const enPassantPositions = {\n          1: [24, 25, 26, 27, 28, 29, 30, 31],\n          2: [32, 33, 34, 35, 36, 37, 38, 39]\n        }\n        const otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n    \n        if (squares[this.state.selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 1) {\n          //left en passant\n          console.log(\"first check\");\n          console.log(squares[this.state.selectedIndex - 9] === index);\n          if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex - 9) {\n            console.log(\"second check\");\n            return true;\n          }\n          if (squares[this.state.selectedIndex + 1] !== null && squares[this.state.selectedIndex + 1].name === \"Pawn\" && squares[this.state.selectedIndex + 1].player === otherPlayer && squares[this.state.selectedIndex + 1].doubleJump && index === this.state.selectedIndex - 7) {\n            return true;\n          }\n        }\n    \n        if (squares[this.state.selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(this.state.selectedIndex) >= 0 && this.state.playerTurn === 2) {\n          if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 7) {\n            return true;\n          }      \n          if (squares[this.state.selectedIndex - 1] !== null && squares[this.state.selectedIndex - 1].name === \"Pawn\" && squares[this.state.selectedIndex - 1].player === otherPlayer && squares[this.state.selectedIndex - 1].doubleJump && index === this.state.selectedIndex + 9) {\n            return true;\n          }\n        }\n    \n        return false;\n    }\n    \n    isMyKinginCheck(squares, check) {\n        return new Promise((resolve, reject) => {\n    \n        var kingIndex = -1;\n        var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n        for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n          if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === this.state.playerTurn) {\n            kingIndex = i;\n          }\n        }\n        \n        var found = false;\n        console.log(kingIndex);\n    \n        for (var j = 0; j < squares.length && !found; ++j) {\n          if (squares[j] !== null && squares[j].player === otherPlayer) {\n            const validMove = squares[j].isMoveValid(j, kingIndex, true);\n            const path = squares[j].getPathIndicies(j, kingIndex);\n            if (validMove) {\n              const validPath = this.checkValidPath(squares, path);\n              console.log(j, kingIndex, squares[42])\n              if (validPath) {\n                found = true;\n              }\n            }\n          }\n        }\n    \n        if (found) {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: 'red'}\n          check = true;\n        }\n        else {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null}\n          check = false;\n        }\n        resolve(check);\n      })\n    }\n    \n    checkValidPath(squares, path) {\n        var valid = true;\n        \n        for (var i = 0; i < path.length && valid; ++i) {\n          if (squares[path[i]] !== null) {\n            valid = false;\n          }\n        }\n    \n        return valid;\n    }\n    \n    checkRook(squares, index) {\n        if (index === 6 || index === 62) {\n          if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n            return true;\n          }\n        }\n    \n        if (index === 2 || index === 58) {\n          if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n            return true;\n          }\n        }\n    }\n    \n    checkCastle(squares, index) {\n        if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n          if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n            //short castle\n            if (index === 62) {\n              if (this.checkRook(squares, index)) {\n                if (squares[61] === null && squares[62] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[61] = new Rook(1);\n                  squares[63] = null;\n                }\n    \n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 6) {\n              if (this.checkRook(squares, index)) {\n                if (squares[5] === null && squares[6] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[5] = new Rook(2);\n                  squares[7] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            //Long castle\n            if (index === 2) {\n              if (this.checkRook(squares, index)) {\n                if (squares[1] === null && squares[2] === null && squares[3] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[3] = new Rook(2);\n                  squares[0] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 58) {\n              if (this.checkRook(squares, index)) {\n                if (squares[57] === null && squares[58] === null && squares[59] === null) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[index].handleMoved();\n                  squares[this.state.selectedIndex] = null;\n                  squares[59] = new Rook(1);\n                  squares[56] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            return squares;\n          }\n        }\n    }\n    \n    \n    handleClick(index) {\n        //shallow copy squares \n        const squares = this.state.squares.slice();\n    \n        console.log(index);\n        //highlight chess piece\n        if (this.state.selectedIndex < 0) {\n          if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n            squares[index].style = {...squares[index].style, backgroundColor: \"#575E6B\" };\n            this.setState({\n              squares: squares,\n              selectedIndex: index\n            });\n          }\n          else {\n            console.log(\"That is not your piece\");\n          }\n        }\n    \n        //piece has been selected\n        else {\n          squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null};\n    \n          // castling king and rook\n          if (squares[this.state.selectedIndex] !== null && squares[this.state.selectedIndex].name === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = this.checkCastle(squares, index);\n            if (newSquares) {\n              var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n              this.setState({\n                squares: newSquares,\n                selectedIndex: -1,\n                playerTurn: nextTurn\n              })\n            }\n            else {\n              console.log(\"invalid move\");\n              this.setState({\n                selectedIndex: -1\n    \n              })\n            }\n          }\n    \n          //en passant\n          else if (this.checkEnPassant(squares, index)) {\n            const newSquares = this.handleEnPassant(squares, index);\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            }) \n          }\n    \n          //if destination of piece is clicked on own piece\n          else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            this.setState({\n              squares: squares, \n              selectedIndex: -1\n            })\n          }\n    \n          // if destination is not on own piece\n          else {\n            console.log(squares[this.state.selectedIndex]);\n            const lastRows = {\n              1: [0, 1, 2, 3, 4, 5, 6, 7],\n              2: [56, 57, 58, 59, 60, 61, 62, 63]\n            };\n            const isSquareOccupied = squares[index] === null ? false : true;\n            const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n            const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n            if (validMove) {\n              const validPath = this.checkValidPath(squares, pathIndicies);\n              if (validPath) {\n                squares[index] = squares[this.state.selectedIndex];\n                squares[index].handleMoved();\n                squares[this.state.selectedIndex] = null;\n                console.log(squares[index]);\n    \n                // pawn to queen\n                if (squares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                  squares[index] = null;\n                  squares[index] = new Queen(1);\n                }\n                if (squares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                  squares[index] = null;\n                  squares[index] = new Queen(2);\n                }\n    \n                // check if king is in check with shallow copied board\n                this.isMyKinginCheck(squares)\n                .then((check) =>{\n                  console.log(check);\n                  if (check) {\n                    console.log(\"Move your king white!\");\n                    squares[this.state.selectedIndex] = squares[index];\n                    squares[index] = null\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1,\n                      king1InCheck: check\n                    })\n                  }\n                  else {\n                    var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n                    console.log(index);\n                    this.setState({\n                      validMove: true,\n                    });\n                    socket.emit('move', {\n                      destinationIndex: index,\n                      gameId: this.props.gameId\n                    });\n\n/*                     socket.emit('move', {\n                      selectedIndex: -1,\n                      playerTurn: nextTurn,\n                      squares: squares,\n                      gameId: this.props.gameId\n                    }) */\n\n/*                     socket.emit('move', {\n                      endIndex: index,\n                      gameId: this.props.gameId,\n                    }) */\n                  }\n                }) \n                .catch((err) => {\n                  console.log(err);\n                })        \n              }\n              else {\n                console.log(\"invalid path\", pathIndicies);\n                this.setState({\n                  squares: squares, \n                  selectedIndex: -1\n                });\n              }\n            }\n            else {\n              console.log(\"invalid move\");\n              this.setState({\n                squares: squares, \n                selectedIndex: -1\n              });\n            }\n          }      \n        }\n    }\n    render() {\n        return (\n          <div className=\"Game\">\n            {\n              this.state.start ? \n              <div>\n              <div>{this.state.player2}</div>\n              <Board \n              squares={this.state.squares}\n              onClick={(index) => this.handleClick(index)}\n              />\n              <div>{this.state.player1}</div>\n              </div>\n              :\n              <div>\n                <div>\n                Welcome to online chess! Send this link with a friend to start your chess game\n                </div>\n                \n                <div>\n                    <input type=\"text\" value={window.location} disabled />\n                </div>\n\n                <div>\n                    <p>Waiting for game to start ...</p>\n                </div>\n              </div>\n            }\n\n          </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}