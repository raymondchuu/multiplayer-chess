{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport Chat from './Chat';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport { socket } from '../socket/socket';\nimport TextField from '@material-ui/core/TextField';\nimport useSound from 'use-sound';\nimport chessSound from '../styles/chess_move.mp3';\nimport '../styles/Game.css';\nimport Piece from '../pieces/Piece';\nexport default function Game(props) {\n  _s();\n\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n  const [playerTurn, setPlayerTurn] = useState(1);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [usernames, setUsernames] = useState([]);\n  const [start, setStart] = useState(false);\n  const [playerOne, setPlayerOne] = useState(false);\n  const [playSound] = useSound(chessSound);\n  const [EnemyKingInCheck, setEnemyKingInCheck] = useState(false); //castling\n\n  useEffect(() => {\n    socket.on('castleBoard', data => {\n      var temp = squares.slice();\n      temp[data.end] = temp[data.start];\n      temp[data.end].handleMoved();\n      temp[data.start] = null;\n\n      if (playerTurn === 1) {\n        temp[data.space1] = new Rook(1);\n      } else {\n        temp[data.space1] = new Rook(2);\n      }\n\n      temp[data.space2] = null;\n      setSquares(temp);\n      setSelectedIndex(-1);\n      playSound();\n      setPlayerTurn(playerTurn === 1 ? 2 : 1);\n    });\n    return () => {\n      socket.off('castleBoard');\n    };\n  }); //chess move\n\n  useEffect(() => {\n    socket.on('userMove', state => {\n      var temp = squares.slice();\n      temp[state.endIndex] = temp[state.initialIndex];\n      temp[state.initialIndex] = null;\n      temp.forEach(square => {\n        if (square !== null) {\n          square.style = { ...square.style,\n            backgroundColor: null\n          };\n        }\n      });\n      console.log(state);\n      temp[state.endIndex].style = { ...temp[state.endIndex].style,\n        backgroundColor: '#FFFABD'\n      };\n\n      if (state.enemyKingIndex !== undefined) {\n        temp[state.enemyKingIndex].style = { ...temp[state.enemyKingIndex].style,\n          backgroundColor: '#FF6060'\n        };\n      }\n\n      setSquares(temp);\n      setPlayerTurn(playerTurn === 1 ? 2 : 1);\n      setSelectedIndex(-1);\n      playSound();\n      console.log(\"new socket on\");\n    });\n    return () => {\n      socket.off('userMove');\n    };\n  }); //game start\n\n  useEffect(() => {\n    socket.emit(\"shouldGameStart\", props.gameId);\n    socket.on(\"start game\", users => {\n      setStart(true);\n      setUsernames(users);\n    });\n  }, []);\n\n  function handleEnPassant(squares, index) {\n    if (playerTurn === 1) {\n      //left en passant\n      if (index === selectedIndex - 9) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index + 8] = null;\n      } //right en passant\n\n\n      if (index === selectedIndex - 7) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index + 8] = null;\n      }\n    } else {\n      //left en passant\n      if (index === selectedIndex + 7) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index - 8] = null;\n      } //right en passant\n\n\n      if (index === selectedIndex + 9) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index - 8] = null;\n      }\n    }\n\n    return squares;\n  }\n\n  function isKingCheckmated(tempsquares, attackingPiecePos, kingPos, path) {\n    /* \n    attacking piece can be eaten\n    attacking piece can be blocked\n    king can move to square that's not in check\n    */\n    const otherPlayer = playerTurn === 1 ? 2 : 1;\n    var found = false;\n\n    for (var i = 0; i < tempsquares.length && !found; ++i) {\n      if (tempsquares[i] !== null && tempsquares[i].player === otherPlayer) {\n        const validMove = tempsquares[i].validMove(i, attackingPiecePos, true);\n\n        if (validMove) {\n          const path = tempsquares[i].getPathIndicies(i, attackingPiecePos);\n          const validPath = checkValidPath(tempsquares, path);\n\n          if (validPath) {\n            found = true;\n          }\n        }\n      }\n    }\n  }\n\n  function checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    };\n    const otherPlayer = playerTurn === 1 ? 2 : 1;\n\n    if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n      //left en passant\n      console.log(\"first check\");\n      console.log(squares[selectedIndex - 9] === index);\n\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n        console.log(\"second check\");\n        return true;\n      }\n\n      if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n        return true;\n      }\n    }\n\n    if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n        return true;\n      }\n\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isMyKinginCheck(squares) {\n    return new Promise((resolve, reject) => {\n      console.log(squares);\n      var kingIndex = -1;\n      var check = false;\n      var otherPlayer = playerTurn === 1 ? 2 : 1; //locate your king\n\n      for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n          kingIndex = i;\n        }\n      }\n\n      var found = false; //check if king is in check\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === otherPlayer) {\n          const validMove = squares[j].isMoveValid(j, kingIndex, true);\n          const path = squares[j].getPathIndicies(j, kingIndex);\n\n          if (validMove) {\n            const validPath = checkValidPath(squares, path);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: '#FF6060'\n        };\n        check = true;\n      } else {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: null\n        };\n        check = false;\n      }\n\n      const obj = {\n        check,\n        kingIndex\n      };\n      resolve(obj);\n    });\n  }\n\n  function isEnemyKinginCheck(squares) {\n    return new Promise((resolve, reject) => {\n      console.log(squares);\n      var enemyKingIndex = -1;\n      var check = false;\n      var otherPlayer = playerTurn === 1 ? 2 : 1; //locate enemy king\n\n      for (var i = 0; i < squares.length && enemyKingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === otherPlayer) {\n          enemyKingIndex = i;\n        }\n      }\n\n      var found = false; //check if king is in check\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === playerTurn) {\n          const validMove = squares[j].isMoveValid(j, enemyKingIndex, true);\n          const path = squares[j].getPathIndicies(j, enemyKingIndex);\n\n          if (validMove) {\n            const validPath = checkValidPath(squares, path);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        check = true;\n      } else {\n        check = false;\n      }\n\n      var enemyCheck = {\n        check,\n        enemyKingIndex\n      };\n      resolve(enemyCheck);\n    });\n  }\n\n  function checkValidPath(squares, path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  function checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  function checkCastle(squares, index) {\n    if (selectedIndex === 4 || selectedIndex === 60) {\n      //short castle\n      if (index === 62) {\n        if (checkRook(squares, index)) {\n          if (squares[61] === null && squares[62] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 61,\n              space2: 63\n            });\n          } else {\n            console.log(\"invalid move\");\n          }\n        }\n      }\n\n      if (index === 6) {\n        if (checkRook(squares, index)) {\n          if (squares[5] === null && squares[6] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 5,\n              space2: 7\n            });\n          } else {\n            return false;\n          }\n        }\n      } //Long castle\n\n\n      if (index === 2) {\n        if (checkRook(squares, index)) {\n          if (squares[1] === null && squares[2] === null && squares[3] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 3,\n              space2: 0\n            });\n          } else {\n            return false;\n          }\n        }\n      }\n\n      if (index === 58) {\n        if (checkRook(squares, index)) {\n          if (squares[57] === null && squares[58] === null && squares[59] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 59,\n              space2: 56\n            });\n          } else {\n            return false;\n          }\n        }\n      }\n\n      return squares;\n    }\n  }\n\n  function handleClick(index) {\n    var player = usernames[0] === props.username ? 1 : 2;\n    console.log(player);\n    console.log(playerTurn);\n\n    if (player === playerTurn) {\n      //shallow copy squares \n      var tempsquares = squares.slice();\n      console.log(index); //highlight chess piece\n\n      if (selectedIndex < 0) {\n        if (tempsquares[index] && tempsquares[index].player === playerTurn) {\n          tempsquares[index].style = { ...tempsquares[index].style,\n            backgroundColor: \"#575E6B\"\n          };\n          setSquares(tempsquares);\n          setSelectedIndex(index);\n        } else {\n          console.log(\"That is not your piece\");\n        }\n      } //piece has been selected\n      else {\n          tempsquares[selectedIndex].style = { ...squares[selectedIndex].style,\n            backgroundColor: null\n          }; // castling king and rook\n\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            checkCastle(tempsquares, index);\n          } //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n              const newSquares = handleEnPassant(tempsquares, index);\n              var nextTurn = playerTurn === 1 ? 2 : 1;\n              setSquares(newSquares);\n              setSelectedIndex(-1);\n              setPlayerTurn(nextTurn);\n            } //if destination of piece is clicked on own piece\n            else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n                console.log(\"That's your own piece wtf\");\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              } // if destination is not on own piece\n              else {\n                  console.log(tempsquares[selectedIndex]);\n                  const lastRows = {\n                    1: [0, 1, 2, 3, 4, 5, 6, 7],\n                    2: [56, 57, 58, 59, 60, 61, 62, 63]\n                  };\n                  const isSquareOccupied = tempsquares[index] === null ? false : true;\n                  const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n                  const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n\n                  if (validMove) {\n                    const validPath = checkValidPath(tempsquares, pathIndicies);\n\n                    if (validPath) {\n                      tempsquares[index] = tempsquares[selectedIndex];\n                      tempsquares[index].handleMoved();\n                      tempsquares[selectedIndex] = null;\n                      console.log(tempsquares[index]); // pawn to queen\n\n                      if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                        tempsquares[index] = null;\n                        tempsquares[index] = new Queen(1);\n                      }\n\n                      if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                        tempsquares[index] = null;\n                        tempsquares[index] = new Queen(2);\n                      } // check if king is in check with shallow copied board\n\n\n                      console.log(tempsquares);\n                      isMyKinginCheck(tempsquares).then(data => {\n                        console.log(data.check);\n\n                        if (data.check) {\n                          console.log(\"Move your king white!\");\n                          setSelectedIndex(-1);\n                        } else {\n                          isEnemyKinginCheck(tempsquares).then(enemyCheckData => {\n                            console.log(EnemyKingInCheck);\n\n                            if (enemyCheckData.check) {\n                              setEnemyKingInCheck(true);\n                              console.log(index);\n                              socket.emit('move', {\n                                initialIndex: selectedIndex,\n                                endIndex: index,\n                                gameId: props.gameId,\n                                enemyKingIndex: enemyCheckData.enemyKingIndex\n                              });\n                            } else {\n                              setEnemyKingInCheck(false);\n                              socket.emit('move', {\n                                initialIndex: selectedIndex,\n                                endIndex: index,\n                                gameId: props.gameId\n                              });\n                            }\n                          });\n                        }\n                      }).catch(err => {\n                        console.log(err);\n                      });\n                    } else {\n                      console.log(\"invalid path\", pathIndicies);\n                      setSquares(tempsquares);\n                      setSelectedIndex(-1);\n                    }\n                  } else {\n                    console.log(\"invalid move\");\n                    setSquares(tempsquares);\n                    setSelectedIndex(-1);\n                  }\n                }\n        }\n    } else {\n      console.log(\"not your turn\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: start ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: usernames[0] === props.username ? usernames[1] : usernames[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Board, {\n          squares: squares,\n          onClick: index => handleClick(index),\n          player: usernames[0] === props.username ? 1 : 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: usernames[0] === props.username ? usernames[0] : usernames[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Chat, {\n          username: props.username,\n          gameId: props.gameId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-lobby-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Online Chess!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hey \", props.username, \"! This app was made so that you can play chess with your friends at the comfort of your own home!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Send this link with a friend to start your chess game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-read-only-input\",\n          label: \"Share Link\",\n          defaultValue: window.location,\n          InputProps: {\n            readOnly: true\n          },\n          style: {\n            width: '30vw',\n            marginTop: '2%',\n            marginBottom: '1%'\n          },\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for game to start ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 505,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"oazxniR39g9l387CQ+lMlyYvx44=\", false, function () {\n  return [useSound];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/Game.js"],"names":["React","useState","useEffect","Board","Chat","initializeChessBoard","Rook","Queen","socket","TextField","useSound","chessSound","Piece","Game","props","squares","setSquares","playerTurn","setPlayerTurn","selectedIndex","setSelectedIndex","usernames","setUsernames","start","setStart","playerOne","setPlayerOne","playSound","EnemyKingInCheck","setEnemyKingInCheck","on","data","temp","slice","end","handleMoved","space1","space2","off","state","endIndex","initialIndex","forEach","square","style","backgroundColor","console","log","enemyKingIndex","undefined","emit","gameId","users","handleEnPassant","index","isKingCheckmated","tempsquares","attackingPiecePos","kingPos","path","otherPlayer","found","i","length","player","validMove","getPathIndicies","validPath","checkValidPath","checkEnPassant","enPassantPositions","name","indexOf","doubleJump","isMyKinginCheck","Promise","resolve","reject","kingIndex","check","j","isMoveValid","obj","isEnemyKinginCheck","enemyCheck","valid","checkRook","moved","checkCastle","handleClick","username","newSquares","nextTurn","lastRows","isSquareOccupied","pathIndicies","then","enemyCheckData","catch","err","window","location","readOnly","width","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport Chat from './Chat';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport { socket } from '../socket/socket';\nimport TextField from '@material-ui/core/TextField';\nimport useSound from 'use-sound';\nimport chessSound from '../styles/chess_move.mp3';\n\nimport '../styles/Game.css';\nimport Piece from '../pieces/Piece';\n\n\nexport default function Game(props) {\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n    const [playerTurn, setPlayerTurn] = useState(1);\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    const [usernames, setUsernames] = useState([]);\n    const [start, setStart] = useState(false);\n    const [playerOne, setPlayerOne] = useState(false);\n    const [playSound] = useSound(chessSound);\n    const [EnemyKingInCheck, setEnemyKingInCheck] = useState(false);\n\n    //castling\n    useEffect(() => {\n      socket.on('castleBoard', (data) => {\n        var temp = squares.slice();\n\n        temp[data.end] = temp[data.start];\n        temp[data.end].handleMoved();\n        temp[data.start] = null;\n        if (playerTurn === 1) {\n          temp[data.space1] = new Rook(1);\n        }\n        else {\n          temp[data.space1] = new Rook(2);\n        }\n        temp[data.space2] = null;\n\n        setSquares(temp);\n        setSelectedIndex(-1);\n        playSound();\n        setPlayerTurn(playerTurn === 1 ? 2 : 1);         \n      })\n\n      return () => {\n        socket.off('castleBoard');\n      }\n    });\n\n    //chess move\n    useEffect(() => {\n      socket.on('userMove', (state) => {\n          var temp = squares.slice();\n          temp[state.endIndex] = temp[state.initialIndex];\n          temp[state.initialIndex] = null;\n          temp.forEach((square) => {\n            if (square !== null) {\n              square.style = { ...square.style, backgroundColor: null};\n            }\n          })\n          console.log(state);\n          temp[state.endIndex].style = { ...temp[state.endIndex].style, backgroundColor: '#FFFABD' };\n          if (state.enemyKingIndex !== undefined) {\n            temp[state.enemyKingIndex].style = { ...temp[state.enemyKingIndex].style, backgroundColor: '#FF6060' };\n          }\n\n          setSquares(temp);\n          setPlayerTurn(playerTurn === 1 ? 2 : 1);\n          setSelectedIndex(-1);\n          playSound();\n          console.log(\"new socket on\");\n      })\n\n      return () => {\n        socket.off('userMove'); \n      }\n    });\n\n    //game start\n     useEffect(() => {\n      socket.emit(\"shouldGameStart\", props.gameId);\n\n      socket.on(\"start game\", (users) => {\n        setStart(true);\n        setUsernames(users);\n      });\n    }, []); \n\n    function handleEnPassant(squares, index) {\n        if (playerTurn === 1) {\n          //left en passant\n          if (index === selectedIndex - 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        \n          //right en passant\n          if (index === selectedIndex - 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        }\n    \n        else {\n          //left en passant\n          if (index === selectedIndex + 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n    \n          //right en passant\n          if (index === selectedIndex + 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n        }\n    \n        return squares;\n    }\n\n    function isKingCheckmated(tempsquares, attackingPiecePos, kingPos, path) {\n      /* \n      attacking piece can be eaten\n      attacking piece can be blocked\n      king can move to square that's not in check\n      */\n     const otherPlayer = playerTurn === 1 ? 2 : 1;\n     var found = false;\n\n      for (var i = 0; i < tempsquares.length && !found; ++i) {\n        if (tempsquares[i] !== null && tempsquares[i].player === otherPlayer) {\n          const validMove = tempsquares[i].validMove(i, attackingPiecePos, true);\n          if (validMove) {\n            const path = tempsquares[i].getPathIndicies(i, attackingPiecePos);\n            const validPath = checkValidPath(tempsquares, path);\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n    }\n    \n    function checkEnPassant(squares, index) {\n        const enPassantPositions = {\n          1: [24, 25, 26, 27, 28, 29, 30, 31],\n          2: [32, 33, 34, 35, 36, 37, 38, 39]\n        }\n        const otherPlayer = playerTurn === 1 ? 2 : 1;\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n          //left en passant\n          console.log(\"first check\");\n          console.log(squares[selectedIndex - 9] === index);\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n            console.log(\"second check\");\n            return true;\n          }\n          if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n            return true;\n          }\n        }\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n            return true;\n          }      \n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n            return true;\n          }\n        }\n    \n        return false;\n    }\n    \n    function isMyKinginCheck(squares) {\n        return new Promise((resolve, reject) => {\n          console.log(squares);\n        var kingIndex = -1;\n        var check = false;\n        var otherPlayer = playerTurn === 1 ? 2 : 1;\n        //locate your king\n        for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n          if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n            kingIndex = i;\n          }\n        }\n        \n        var found = false;\n    \n        //check if king is in check\n        for (var j = 0; j < squares.length && !found; ++j) {\n          if (squares[j] !== null && squares[j].player === otherPlayer) {\n            const validMove = squares[j].isMoveValid(j, kingIndex, true);\n            const path = squares[j].getPathIndicies(j, kingIndex);\n            if (validMove) {\n              const validPath = checkValidPath(squares, path);\n              if (validPath) {\n                found = true;\n              }\n            }\n          }\n        }\n    \n        if (found) {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: '#FF6060'};\n          check = true;\n        }\n        else {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null};\n          check = false;\n        }\n        const obj = { check, kingIndex };\n        resolve(obj);\n      })\n    }\n\n    function isEnemyKinginCheck(squares) {\n      return new Promise((resolve, reject) => {\n        console.log(squares);\n      var enemyKingIndex = -1;\n      var check = false;\n      var otherPlayer = playerTurn === 1 ? 2 : 1;\n      //locate enemy king\n      for (var i = 0; i < squares.length && enemyKingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === otherPlayer) {\n          enemyKingIndex = i;\n        }\n      }\n      \n      var found = false;\n  \n      //check if king is in check\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === playerTurn) {\n          const validMove = squares[j].isMoveValid(j, enemyKingIndex, true);\n          const path = squares[j].getPathIndicies(j, enemyKingIndex);\n          if (validMove) {\n            const validPath = checkValidPath(squares, path);\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n  \n      if (found) {\n        check = true;\n      }\n      else {\n        check = false;\n      }\n\n      var enemyCheck = { check, enemyKingIndex }\n      resolve(enemyCheck);\n    })\n  }\n    \n    function checkValidPath(squares, path) {\n        var valid = true;\n        \n        for (var i = 0; i < path.length && valid; ++i) {\n          if (squares[path[i]] !== null) {\n            valid = false;\n          }\n        }\n    \n        return valid;\n    }\n    \n    function checkRook(squares, index) {\n        if (index === 6 || index === 62) {\n          if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n            return true;\n          }\n        }\n    \n        if (index === 2 || index === 58) {\n          if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n            return true;\n          }\n        }\n    }\n    \n    function checkCastle(squares, index) {\n        if (selectedIndex === 4 || selectedIndex === 60) {\n          //short castle\n          if (index === 62) {\n            if (checkRook(squares, index)) {\n              if (squares[61] === null && squares[62] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 61,\n                  space2: 63,\n                });\n              }\n  \n              else {\n                console.log(\"invalid move\");\n              }\n            }\n          }\n  \n          if (index === 6) {\n            if (checkRook(squares, index)) {\n              if (squares[5] === null && squares[6] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 5,\n                  space2: 7,\n                });\n              }\n              else {\n                return false;\n              }\n            }\n          }\n  \n          //Long castle\n          if (index === 2) {\n            if (checkRook(squares, index)) {\n              if (squares[1] === null && squares[2] === null && squares[3] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 3,\n                  space2: 0,\n                });\n              }\n              else {\n                return false;\n              }\n            }\n          }\n  \n          if (index === 58) {\n            if (checkRook(squares, index)) {\n              if (squares[57] === null && squares[58] === null && squares[59] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 59,\n                  space2: 56,\n                });\n              }\n              else {\n                return false;\n              }\n            }\n          }\n  \n          return squares;\n      }\n    }\n    \n    \n    function handleClick(index) {\n      var player = usernames[0] === props.username ? 1 : 2;\n      console.log(player);\n      console.log(playerTurn);\n      if (player === playerTurn) {\n        //shallow copy squares \n        var tempsquares = squares.slice();\n    \n        console.log(index);\n        //highlight chess piece\n        if (selectedIndex < 0) {\n          if (tempsquares[index] && (tempsquares[index].player === playerTurn)) {\n            tempsquares[index].style = {...tempsquares[index].style, backgroundColor: \"#575E6B\" };\n            setSquares(tempsquares);\n            setSelectedIndex(index);\n          }\n          else {\n            console.log(\"That is not your piece\");\n          }\n        }\n    \n        //piece has been selected\n        else {\n          tempsquares[selectedIndex].style = {...squares[selectedIndex].style, backgroundColor: null};\n    \n          // castling king and rook\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            checkCastle(tempsquares, index);\n          }\n    \n          //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n            const newSquares = handleEnPassant(tempsquares, index);\n            var nextTurn = playerTurn === 1 ? 2 : 1;\n            setSquares(newSquares);\n            setSelectedIndex(-1);\n            setPlayerTurn(nextTurn);\n          }\n    \n          //if destination of piece is clicked on own piece\n          else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            setSquares(tempsquares);\n            setSelectedIndex(-1);\n          }\n    \n          // if destination is not on own piece\n          else {\n            console.log(tempsquares[selectedIndex]);\n            const lastRows = {\n              1: [0, 1, 2, 3, 4, 5, 6, 7],\n              2: [56, 57, 58, 59, 60, 61, 62, 63]\n            };\n            const isSquareOccupied = tempsquares[index] === null ? false : true;\n            const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n            const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n            if (validMove) {\n              const validPath = checkValidPath(tempsquares, pathIndicies);\n              if (validPath) {\n                tempsquares[index] = tempsquares[selectedIndex];\n                tempsquares[index].handleMoved();\n                tempsquares[selectedIndex] = null;\n                console.log(tempsquares[index]);\n    \n                // pawn to queen\n                if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(1);\n                }\n                if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(2);\n                }\n    \n                // check if king is in check with shallow copied board\n                console.log(tempsquares);\n                isMyKinginCheck(tempsquares)\n                .then((data) =>{\n                  console.log(data.check);\n                  if (data.check) {\n                    console.log(\"Move your king white!\");\n                    setSelectedIndex(-1);\n                  }\n                  else {\n                    isEnemyKinginCheck(tempsquares)\n                    .then((enemyCheckData) => {\n                      console.log(EnemyKingInCheck);\n                      if (enemyCheckData.check) {\n                        setEnemyKingInCheck(true);\n                        console.log(index);\n                        socket.emit('move', {\n                        initialIndex: selectedIndex,\n                        endIndex: index,\n                        gameId: props.gameId,\n                        enemyKingIndex: enemyCheckData.enemyKingIndex\n                        }) \n                      }\n\n                      else {\n                        setEnemyKingInCheck(false);\n                        socket.emit('move', {\n                          initialIndex: selectedIndex,\n                          endIndex: index,\n                          gameId: props.gameId,\n                        }) \n                      }\n\n                    })\n                  }\n                }) \n                .catch((err) => {\n                  console.log(err);\n                })        \n              }\n              else {\n                console.log(\"invalid path\", pathIndicies);\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              }\n            }\n            else {\n              console.log(\"invalid move\");\n              setSquares(tempsquares);\n              setSelectedIndex(-1);\n            }\n          }      \n        }\n      }\n\n      else {\n        console.log(\"not your turn\");\n      }\n    }\n\n      return (\n        <div className=\"Game\">\n          {\n            start ? \n            <div className=\"game-container\">\n              <div>\n                <h1>{usernames[0] === props.username ? usernames[1] : usernames[0]}</h1>\n                <Board \n                squares={squares}\n                onClick={(index) => handleClick(index)}\n                player={usernames[0] === props.username ? 1 : 2}\n                />\n                <h1>{usernames[0] === props.username ? usernames[0] : usernames[1]}</h1>\n              </div>\n              <div>\n                  <Chat username={props.username} gameId={props.gameId} />\n              </div>\n            </div>\n            :\n            <div className=\"game-lobby-container\">\n              <h1>Welcome to Online Chess!</h1>\n              <p>\n                Hey {props.username}! This app was made so that you can play chess with your friends at the comfort of your own home!\n              </p>\n              <p>\n                Send this link with a friend to start your chess game\n              </p>\n              \n              <div>\n              <TextField\n                id=\"outlined-read-only-input\"\n                label=\"Share Link\"\n                defaultValue={window.location}\n                InputProps={{\n                  readOnly: true,\n                }}\n                style={{width: '30vw', marginTop: '2%', marginBottom: '1%'}}\n                variant=\"outlined\"\n              />                  \n              </div>\n\n              <div>\n                  <p>Waiting for game to start ...</p>\n              </div>\n            </div>\n          }\n\n        </div>\n      );\n    }\n"]},"metadata":{},"sourceType":"module"}