{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport Chat from './Chat';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport { socket } from '../socket/socket';\nimport TextField from '@material-ui/core/TextField';\nimport useSound from 'use-sound';\nimport chessSound from '../styles/chess_move.mp3';\nimport '../styles/Game.css';\nexport default function Game(props) {\n  _s();\n\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n  const [playerTurn, setPlayerTurn] = useState(1);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [usernames, setUsernames] = useState([]);\n  const [start, setStart] = useState(false);\n  const [playerOne, setPlayerOne] = useState(false);\n  const [playSound] = useSound(chessSound); //castling\n\n  useEffect(() => {\n    socket.on('castleBoard', data => {\n      var temp = squares.slice();\n      temp[data.end] = temp[data.start];\n      temp[data.end].handleMoved();\n      temp[data.start] = null;\n\n      if (playerTurn === 1) {\n        temp[data.space1] = new Rook(1);\n      } else {\n        temp[data.space1] = new Rook(2);\n      }\n\n      temp[data.space2] = null;\n      setSquares(temp);\n      setSelectedIndex(-1);\n      playSound();\n      setPlayerTurn(playerTurn === 1 ? 2 : 1);\n    });\n    return () => {\n      socket.off('castleBoard');\n    };\n  }); //chess move\n\n  useEffect(() => {\n    socket.on('userMove', state => {\n      var temp = squares.slice();\n      temp[state.endIndex] = temp[state.initialIndex];\n      temp[state.initialIndex].style = {\n        backgroundImage: \"\",\n        backgroundColor: \"#fff35f\"\n      };\n      temp.forEach(square => {\n        if (square !== null) {\n          square.style = { ...square.style,\n            backgroundColor: null\n          };\n        }\n      });\n      temp[state.endIndex].style = { ...temp[state.endIndex].style,\n        backgroundColor: '#fff35f'\n      };\n      setSquares(temp);\n      setPlayerTurn(playerTurn === 1 ? 2 : 1);\n      setSelectedIndex(-1);\n      playSound();\n      console.log(\"new socket on\");\n    });\n    return () => {\n      socket.off('userMove');\n    };\n  }); //game start\n\n  useEffect(() => {\n    socket.emit(\"shouldGameStart\", props.gameId);\n    socket.on(\"start game\", users => {\n      setStart(true);\n      setUsernames(users);\n    });\n  }, []);\n\n  function handleEnPassant(squares, index) {\n    if (playerTurn === 1) {\n      //left en passant\n      if (index === selectedIndex - 9) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index + 8] = null;\n      } //right en passant\n\n\n      if (index === selectedIndex - 7) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index + 8] = null;\n      }\n    } else {\n      //left en passant\n      if (index === selectedIndex + 7) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index - 8] = null;\n      } //right en passant\n\n\n      if (index === selectedIndex + 9) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index - 8] = null;\n      }\n    }\n\n    return squares;\n  }\n\n  function checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    };\n    const otherPlayer = playerTurn === 1 ? 2 : 1;\n\n    if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n      //left en passant\n      console.log(\"first check\");\n      console.log(squares[selectedIndex - 9] === index);\n\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n        console.log(\"second check\");\n        return true;\n      }\n\n      if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n        return true;\n      }\n    }\n\n    if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n        return true;\n      }\n\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isMyKinginCheck(squares) {\n    return new Promise((resolve, reject) => {\n      var kingIndex = -1;\n      var check = false;\n      var otherPlayer = playerTurn === 1 ? 2 : 1; //locate your king\n\n      for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n          kingIndex = i;\n        }\n      }\n\n      var found = false;\n      console.log(kingIndex); //check if king is in check\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === otherPlayer) {\n          const validMove = squares[j].isMoveValid(j, kingIndex, true);\n          const path = squares[j].getPathIndicies(j, kingIndex);\n\n          if (validMove) {\n            const validPath = checkValidPath(squares, path);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: 'red'\n        };\n        check = true;\n      } else {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: null\n        };\n        check = false;\n      }\n\n      const obj = {\n        check,\n        kingIndex\n      };\n      resolve(obj);\n    });\n  }\n\n  function checkValidPath(squares, path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  function checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  function checkCastle(squares, index) {\n    if (selectedIndex === 4 || selectedIndex === 60) {\n      //short castle\n      if (index === 62) {\n        if (checkRook(squares, index)) {\n          if (squares[61] === null && squares[62] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 61,\n              space2: 63\n            });\n          } else {\n            console.log(\"invalid move\");\n          }\n        }\n      }\n\n      if (index === 6) {\n        if (checkRook(squares, index)) {\n          if (squares[5] === null && squares[6] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 5,\n              space2: 7\n            });\n          } else {\n            return false;\n          }\n        }\n      } //Long castle\n\n\n      if (index === 2) {\n        if (checkRook(squares, index)) {\n          if (squares[1] === null && squares[2] === null && squares[3] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 3,\n              space2: 0\n            });\n          } else {\n            return false;\n          }\n        }\n      }\n\n      if (index === 58) {\n        if (checkRook(squares, index)) {\n          if (squares[57] === null && squares[58] === null && squares[59] === null) {\n            socket.emit('castle', {\n              gameId: props.gameId,\n              start: selectedIndex,\n              end: index,\n              space1: 59,\n              space2: 56\n            });\n          } else {\n            return false;\n          }\n        }\n      }\n\n      return squares;\n    }\n  }\n\n  function handleClick(index) {\n    var player = usernames[0] === props.username ? 1 : 2;\n    console.log(player);\n    console.log(playerTurn);\n\n    if (player === playerTurn) {\n      //shallow copy squares \n      const tempsquares = squares.slice();\n      console.log(index); //highlight chess piece\n\n      if (selectedIndex < 0) {\n        if (tempsquares[index] && tempsquares[index].player === playerTurn) {\n          tempsquares[index].style = { ...tempsquares[index].style,\n            backgroundColor: \"#575E6B\"\n          };\n          setSquares(tempsquares);\n          setSelectedIndex(index);\n        } else {\n          console.log(\"That is not your piece\");\n        }\n      } //piece has been selected\n      else {\n          tempsquares[selectedIndex].style = { ...squares[selectedIndex].style,\n            backgroundColor: null\n          }; // castling king and rook\n\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            checkCastle(tempsquares, index);\n          } //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n              const newSquares = handleEnPassant(tempsquares, index);\n              var nextTurn = playerTurn === 1 ? 2 : 1;\n              setSquares(newSquares);\n              setSelectedIndex(-1);\n              setPlayerTurn(nextTurn);\n            } //if destination of piece is clicked on own piece\n            else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n                console.log(\"That's your own piece wtf\");\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              } // if destination is not on own piece\n              else {\n                  console.log(tempsquares[selectedIndex]);\n                  const lastRows = {\n                    1: [0, 1, 2, 3, 4, 5, 6, 7],\n                    2: [56, 57, 58, 59, 60, 61, 62, 63]\n                  };\n                  const isSquareOccupied = tempsquares[index] === null ? false : true;\n                  const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n                  const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n\n                  if (validMove) {\n                    const validPath = checkValidPath(tempsquares, pathIndicies);\n\n                    if (validPath) {\n                      tempsquares[index] = tempsquares[selectedIndex];\n                      tempsquares[index].handleMoved();\n                      tempsquares[selectedIndex] = null;\n                      console.log(tempsquares[index]); // pawn to queen\n\n                      if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                        tempsquares[index] = null;\n                        tempsquares[index] = new Queen(1);\n                      }\n\n                      if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                        tempsquares[index] = null;\n                        tempsquares[index] = new Queen(2);\n                      } // check if king is in check with shallow copied board\n\n\n                      isMyKinginCheck(tempsquares).then(data => {\n                        console.log(data.check);\n\n                        if (data.check) {\n                          console.log(\"Move your king white!\");\n                          setSelectedIndex(-1);\n                        } else {\n                          console.log(index); //                    setValidMove(true);\n\n                          socket.emit('move', {\n                            initialIndex: selectedIndex,\n                            endIndex: index,\n                            gameId: props.gameId\n                          });\n                        }\n                      }).catch(err => {\n                        console.log(err);\n                      });\n                    } else {\n                      console.log(\"invalid path\", pathIndicies);\n                      setSquares(tempsquares);\n                      setSelectedIndex(-1);\n                    }\n                  } else {\n                    console.log(\"invalid move\");\n                    setSquares(tempsquares);\n                    setSelectedIndex(-1);\n                  }\n                }\n        }\n    } else {\n      console.log(\"not your turn\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: start ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: usernames[0] === props.username ? usernames[1] : usernames[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Board, {\n          squares: squares,\n          onClick: index => handleClick(index),\n          player: usernames[0] === props.username ? 1 : 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: usernames[0] === props.username ? usernames[0] : usernames[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Chat, {\n          username: props.username,\n          gameId: props.gameId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-lobby-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Online Chess!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hey \", props.username, \"! This app was made so that you can play chess with your friends at the comfort of your own home!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Send this link with a friend to start your chess game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-read-only-input\",\n          label: \"Share Link\",\n          defaultValue: window.location,\n          InputProps: {\n            readOnly: true\n          },\n          style: {\n            width: '30vw',\n            marginTop: '2%',\n            marginBottom: '1%'\n          },\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for game to start ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"AVJ+q2d6fyz1sUSKWQVDYBdEd7g=\", false, function () {\n  return [useSound];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/Game.js"],"names":["React","useState","useEffect","Board","Chat","initializeChessBoard","Rook","Queen","socket","TextField","useSound","chessSound","Game","props","squares","setSquares","playerTurn","setPlayerTurn","selectedIndex","setSelectedIndex","usernames","setUsernames","start","setStart","playerOne","setPlayerOne","playSound","on","data","temp","slice","end","handleMoved","space1","space2","off","state","endIndex","initialIndex","style","backgroundImage","backgroundColor","forEach","square","console","log","emit","gameId","users","handleEnPassant","index","checkEnPassant","enPassantPositions","otherPlayer","name","indexOf","player","doubleJump","isMyKinginCheck","Promise","resolve","reject","kingIndex","check","i","length","found","j","validMove","isMoveValid","path","getPathIndicies","validPath","checkValidPath","obj","valid","checkRook","moved","checkCastle","handleClick","username","tempsquares","newSquares","nextTurn","lastRows","isSquareOccupied","pathIndicies","then","catch","err","window","location","readOnly","width","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport Chat from './Chat';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport { socket } from '../socket/socket';\nimport TextField from '@material-ui/core/TextField';\nimport useSound from 'use-sound';\nimport chessSound from '../styles/chess_move.mp3';\n\nimport '../styles/Game.css';\n\n\nexport default function Game(props) {\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n    const [playerTurn, setPlayerTurn] = useState(1);\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    const [usernames, setUsernames] = useState([]);\n    const [start, setStart] = useState(false);\n    const [playerOne, setPlayerOne] = useState(false);\n    const [playSound] = useSound(chessSound);\n\n    //castling\n    useEffect(() => {\n      socket.on('castleBoard', (data) => {\n        var temp = squares.slice();\n\n        temp[data.end] = temp[data.start];\n        temp[data.end].handleMoved();\n        temp[data.start] = null;\n        if (playerTurn === 1) {\n          temp[data.space1] = new Rook(1);\n        }\n        else {\n          temp[data.space1] = new Rook(2);\n        }\n        temp[data.space2] = null;\n\n        setSquares(temp);\n        setSelectedIndex(-1);\n        playSound();\n        setPlayerTurn(playerTurn === 1 ? 2 : 1);         \n      })\n\n      return () => {\n        socket.off('castleBoard');\n      }\n    });\n\n    //chess move\n    useEffect(() => {\n      socket.on('userMove', (state) => {\n          var temp = squares.slice();\n          temp[state.endIndex] = temp[state.initialIndex];\n          temp[state.initialIndex].style = {backgroundImage: \"\", backgroundColor: \"#fff35f\"};\n          temp.forEach((square) => {\n            if (square !== null) {\n              square.style = { ...square.style, backgroundColor: null};\n            }\n          })\n          temp[state.endIndex].style = { ...temp[state.endIndex].style, backgroundColor: '#fff35f'}\n  \n          setSquares(temp);\n          setPlayerTurn(playerTurn === 1 ? 2 : 1);\n          setSelectedIndex(-1);\n          playSound();\n          console.log(\"new socket on\");\n      })\n\n      return () => {\n        socket.off('userMove'); \n      }\n    });\n\n    //game start\n     useEffect(() => {\n      socket.emit(\"shouldGameStart\", props.gameId);\n\n      socket.on(\"start game\", (users) => {\n        setStart(true);\n        setUsernames(users);\n      });\n    }, []); \n\n    function handleEnPassant(squares, index) {\n        if (playerTurn === 1) {\n          //left en passant\n          if (index === selectedIndex - 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        \n          //right en passant\n          if (index === selectedIndex - 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        }\n    \n        else {\n          //left en passant\n          if (index === selectedIndex + 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n    \n          //right en passant\n          if (index === selectedIndex + 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n        }\n    \n        return squares;\n    }\n    \n    function checkEnPassant(squares, index) {\n        const enPassantPositions = {\n          1: [24, 25, 26, 27, 28, 29, 30, 31],\n          2: [32, 33, 34, 35, 36, 37, 38, 39]\n        }\n        const otherPlayer = playerTurn === 1 ? 2 : 1;\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n          //left en passant\n          console.log(\"first check\");\n          console.log(squares[selectedIndex - 9] === index);\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n            console.log(\"second check\");\n            return true;\n          }\n          if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n            return true;\n          }\n        }\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n            return true;\n          }      \n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n            return true;\n          }\n        }\n    \n        return false;\n    }\n    \n    function isMyKinginCheck(squares) {\n        return new Promise((resolve, reject) => {\n    \n        var kingIndex = -1;\n        var check = false;\n        var otherPlayer = playerTurn === 1 ? 2 : 1;\n        //locate your king\n        for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n          if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n            kingIndex = i;\n          }\n        }\n        \n        var found = false;\n        console.log(kingIndex);\n    \n        //check if king is in check\n        for (var j = 0; j < squares.length && !found; ++j) {\n          if (squares[j] !== null && squares[j].player === otherPlayer) {\n            const validMove = squares[j].isMoveValid(j, kingIndex, true);\n            const path = squares[j].getPathIndicies(j, kingIndex);\n            if (validMove) {\n              const validPath = checkValidPath(squares, path);\n              if (validPath) {\n                found = true;\n              }\n            }\n          }\n        }\n    \n        if (found) {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: 'red'};\n          check = true;\n        }\n        else {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null};\n          check = false;\n        }\n        const obj = { check, kingIndex };\n        resolve(obj);\n      })\n    }\n    \n    function checkValidPath(squares, path) {\n        var valid = true;\n        \n        for (var i = 0; i < path.length && valid; ++i) {\n          if (squares[path[i]] !== null) {\n            valid = false;\n          }\n        }\n    \n        return valid;\n    }\n    \n    function checkRook(squares, index) {\n        if (index === 6 || index === 62) {\n          if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n            return true;\n          }\n        }\n    \n        if (index === 2 || index === 58) {\n          if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n            return true;\n          }\n        }\n    }\n    \n    function checkCastle(squares, index) {\n        if (selectedIndex === 4 || selectedIndex === 60) {\n          //short castle\n          if (index === 62) {\n            if (checkRook(squares, index)) {\n              if (squares[61] === null && squares[62] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 61,\n                  space2: 63,\n                });\n              }\n  \n              else {\n                console.log(\"invalid move\");\n              }\n            }\n          }\n  \n          if (index === 6) {\n            if (checkRook(squares, index)) {\n              if (squares[5] === null && squares[6] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 5,\n                  space2: 7,\n                });\n              }\n              else {\n                return false;\n              }\n            }\n          }\n  \n          //Long castle\n          if (index === 2) {\n            if (checkRook(squares, index)) {\n              if (squares[1] === null && squares[2] === null && squares[3] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 3,\n                  space2: 0,\n                });\n              }\n              else {\n                return false;\n              }\n            }\n          }\n  \n          if (index === 58) {\n            if (checkRook(squares, index)) {\n              if (squares[57] === null && squares[58] === null && squares[59] === null) {\n                socket.emit('castle', {\n                  gameId: props.gameId,\n                  start: selectedIndex,\n                  end: index,\n                  space1: 59,\n                  space2: 56,\n                });\n              }\n              else {\n                return false;\n              }\n            }\n          }\n  \n          return squares;\n      }\n    }\n    \n    \n    function handleClick(index) {\n      var player = usernames[0] === props.username ? 1 : 2;\n      console.log(player);\n      console.log(playerTurn);\n      if (player === playerTurn) {\n        //shallow copy squares \n        const tempsquares = squares.slice();\n    \n        console.log(index);\n        //highlight chess piece\n        if (selectedIndex < 0) {\n          if (tempsquares[index] && (tempsquares[index].player === playerTurn)) {\n            tempsquares[index].style = {...tempsquares[index].style, backgroundColor: \"#575E6B\" };\n            setSquares(tempsquares);\n            setSelectedIndex(index);\n          }\n          else {\n            console.log(\"That is not your piece\");\n          }\n        }\n    \n        //piece has been selected\n        else {\n          tempsquares[selectedIndex].style = {...squares[selectedIndex].style, backgroundColor: null};\n    \n          // castling king and rook\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            checkCastle(tempsquares, index);\n          }\n    \n          //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n            const newSquares = handleEnPassant(tempsquares, index);\n            var nextTurn = playerTurn === 1 ? 2 : 1;\n            setSquares(newSquares);\n            setSelectedIndex(-1);\n            setPlayerTurn(nextTurn);\n          }\n    \n          //if destination of piece is clicked on own piece\n          else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            setSquares(tempsquares);\n            setSelectedIndex(-1);\n          }\n    \n          // if destination is not on own piece\n          else {\n            console.log(tempsquares[selectedIndex]);\n            const lastRows = {\n              1: [0, 1, 2, 3, 4, 5, 6, 7],\n              2: [56, 57, 58, 59, 60, 61, 62, 63]\n            };\n            const isSquareOccupied = tempsquares[index] === null ? false : true;\n            const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n            const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n            if (validMove) {\n              const validPath = checkValidPath(tempsquares, pathIndicies);\n              if (validPath) {\n                tempsquares[index] = tempsquares[selectedIndex];\n                tempsquares[index].handleMoved();\n                tempsquares[selectedIndex] = null;\n                console.log(tempsquares[index]);\n    \n                // pawn to queen\n                if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(1);\n                }\n                if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(2);\n                }\n    \n                // check if king is in check with shallow copied board\n                isMyKinginCheck(tempsquares)\n                .then((data) =>{\n                  console.log(data.check);\n                  if (data.check) {\n                    console.log(\"Move your king white!\");\n                    setSelectedIndex(-1);\n                  }\n                  else {\n                    console.log(index);\n//                    setValidMove(true);\n\n                    socket.emit('move', {\n                    initialIndex: selectedIndex,\n                    endIndex: index,\n                    gameId: props.gameId,\n                    }) \n\n                  }\n                }) \n                .catch((err) => {\n                  console.log(err);\n                })        \n              }\n              else {\n                console.log(\"invalid path\", pathIndicies);\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              }\n            }\n            else {\n              console.log(\"invalid move\");\n              setSquares(tempsquares);\n              setSelectedIndex(-1);\n            }\n          }      \n        }\n      }\n\n      else {\n        console.log(\"not your turn\");\n      }\n    }\n\n      return (\n        <div className=\"Game\">\n          {\n            start ? \n            <div className=\"game-container\">\n              <div>\n                <h1>{usernames[0] === props.username ? usernames[1] : usernames[0]}</h1>\n                <Board \n                squares={squares}\n                onClick={(index) => handleClick(index)}\n                player={usernames[0] === props.username ? 1 : 2}\n                />\n                <h1>{usernames[0] === props.username ? usernames[0] : usernames[1]}</h1>\n              </div>\n              <div>\n                  <Chat username={props.username} gameId={props.gameId} />\n              </div>\n            </div>\n            :\n            <div className=\"game-lobby-container\">\n              <h1>Welcome to Online Chess!</h1>\n              <p>\n                Hey {props.username}! This app was made so that you can play chess with your friends at the comfort of your own home!\n              </p>\n              <p>\n                Send this link with a friend to start your chess game\n              </p>\n              \n              <div>\n              <TextField\n                id=\"outlined-read-only-input\"\n                label=\"Share Link\"\n                defaultValue={window.location}\n                InputProps={{\n                  readOnly: true,\n                }}\n                style={{width: '30vw', marginTop: '2%', marginBottom: '1%'}}\n                variant=\"outlined\"\n              />                  \n              </div>\n\n              <div>\n                  <p>Waiting for game to start ...</p>\n              </div>\n            </div>\n          }\n\n        </div>\n      );\n    }\n"]},"metadata":{},"sourceType":"module"}