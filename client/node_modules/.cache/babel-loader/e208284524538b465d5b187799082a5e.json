{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/src/components/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport '../App.css';\nimport Rook from '../pieces/Rook';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      kingInCheck: false\n    };\n  }\n\n  isKinginCheck(index, squares) {\n    if (this.state.playerTurn === 1) {\n      var found = false;\n      var kingIndex;\n\n      for (var i = 0; i < squares.length && !found; ++i) {\n        if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === 1) {\n          kingIndex = i;\n        }\n      }\n\n      const paths = squares[index].getPathIndicies(index, kingIndex);\n      paths.forEach(square => {\n        if (square !== null) {\n          return false;\n        }\n      });\n      return true;\n    } else {\n      var found = false;\n      var kingIndex;\n\n      for (var i = 0; i < squares.length && !found; ++i) {\n        if (squres[i] !== null && squares[i].getName() === \"King\" && squares[i].player === 2) {\n          kingIndex = i;\n        }\n      }\n\n      const paths = squares[index].getPathIndicies(index, kingIndex);\n      paths.forEach(square => {\n        if (square !== null) {\n          return false;\n        }\n      });\n      return true;\n    }\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            } else {\n              return false;\n            }\n          }\n        } //Long castle\n\n\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n    console.log(index); //highlight chess piece\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#575E6B\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        };\n        console.log(squares[this.state.selectedIndex]); // castling king and rook\n\n        if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n          const newSquares = this.checkCastle(squares, index);\n\n          if (newSquares) {\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            this.setState({\n              squares: newSquares,\n              selectedIndex: -1,\n              playerTurn: nextTurn\n            });\n          } else {\n            console.log(\"invalid move\");\n            this.setState({\n              selectedIndex: -1\n            });\n          }\n        } //en passant\n        else if (squares[this.state.selectedIndex].getName() === \"Pawn\" && (squares[index] === this.state.selectedIndex + 7 || squares[index] === this.state.selectedIndex - 7 || squares[index] === this.state.selectedIndex + 9 || squares[index] === this.state.selectedIndex - 9) && squares[index] === null) {\n            var leftPawnPos = false;\n            var rightPawnPos = false;\n            console.log(\"enpassant\");\n\n            if (squares[this.state.selectedIndex + 1].getName() === \"Pawn\" && squares[this.state.selectedIndex + 1].player !== this.state.playerTurn) {\n              rightPawnPos = this.state.selectedIndex + 1;\n            }\n\n            if (squares[this.state.selectedIndex - 1].getName() === \"Pawn\" && squares[this.state.selectedIndex - 1].player !== this.state.playerTurn) {\n              leftPawnPos = this.state.selectedIndex - 1;\n            }\n\n            const validPassant = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, false, leftPawnPos, rightPawnPos);\n\n            if (validPassant) {\n              if (index === this.state.selectedIndex - 9 || index === this.state.selectedIndex - 7) {\n                squares[index] = squares[this.state.selectedIndex];\n                squares[this.state.selectedIndex] = null;\n                squares[index + 8] = null;\n              } else if (index === this.state.selectedIndex + 9 || this.state.selectedIndex + 7) {\n                squares[index] = squares[this.state.selectedIndex];\n                squares[this.state.selectedIndex] = null;\n                squares[index - 8] = null;\n              }\n            }\n          } //if destination of piece is clicked on own piece\n          else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n              console.log(\"That's your own piece wtf\");\n              this.setState({\n                squares: squares,\n                selectedIndex: -1\n              });\n            } // if destination is not on own piece\n            else {\n                const isSquareOccupied = squares[index] === null ? false : true;\n                const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n                const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n                if (validMove) {\n                  if (this.checkValidPath(pathIndicies)) {\n                    squares[index] = squares[this.state.selectedIndex];\n                    squares[index].handleMoved();\n                    squares[this.state.selectedIndex] = null;\n                    var nextTurn = this.state.playerTurn === 1 ? 2 : 1; // check if king is in check\n\n                    var check = this.isKinginCheck(index, squares);\n                    this.setState({\n                      squares: squares,\n                      playerTurn: nextTurn,\n                      selectedIndex: -1,\n                      kingInCheck: check ? true : false\n                    });\n                    console.log(this.state.kingInCheck);\n                  } else {\n                    console.log(pathIndicies);\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1\n                    });\n                  }\n                } else {\n                  console.log(\"invalid move\");\n                  this.setState({\n                    squares: squares,\n                    selectedIndex: -1\n                  });\n                }\n              }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: index => this.handleClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/src/components/App.js"],"names":["React","Board","initializeChessBoard","Rook","App","Component","constructor","state","squares","playerTurn","selectedIndex","kingInCheck","isKinginCheck","index","found","kingIndex","i","length","getName","player","paths","getPathIndicies","forEach","square","squres","checkValidPath","path","valid","checkRook","moved","checkCastle","handleMoved","handleClick","slice","console","log","style","backgroundColor","setState","newSquares","nextTurn","leftPawnPos","rightPawnPos","validPassant","isMoveValid","isSquareOccupied","validMove","pathIndicies","check","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\n\nimport '../App.css';\nimport Rook from '../pieces/Rook';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      kingInCheck: false,\n    }\n  }\n\n  isKinginCheck(index, squares) {\n    if (this.state.playerTurn === 1) {\n      var found = false;\n      var kingIndex;\n\n      for (var i = 0; i < squares.length && !found; ++i) {\n        if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === 1) {\n          kingIndex = i;\n        }\n      }\n      const paths = squares[index].getPathIndicies(index, kingIndex);\n      paths.forEach(square => {\n        if (square !== null) {\n          return false;\n        }\n      })\n\n      return true;\n    }\n    else {\n      var found = false;\n      var kingIndex;\n\n      for (var i = 0; i < squares.length && !found; ++i) {\n        if (squres[i] !== null && squares[i].getName() === \"King\" && squares[i].player === 2) {\n          kingIndex = i;\n        }\n      }\n\n      const paths = squares[index].getPathIndicies(index, kingIndex);\n      paths.forEach(square => {\n        if (square !== null) {\n          return false;\n        }\n      })\n\n      return true;\n    }\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n    \n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            }\n\n            else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        //Long castle\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n\n    console.log(index);\n    //highlight chess piece\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n        squares[index].style = {...squares[index].style, backgroundColor: \"#575E6B\" };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      }\n      else {\n        console.log(\"That is not your piece\");\n      }\n    }\n\n    //piece has been selected\n    else {\n      squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null};\n\n      console.log(squares[this.state.selectedIndex]);\n\n      // castling king and rook\n      if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n        const newSquares = this.checkCastle(squares, index);\n        if (newSquares) {\n          var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n          this.setState({\n            squares: newSquares,\n            selectedIndex: -1,\n            playerTurn: nextTurn\n          })\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            selectedIndex: -1\n\n          })\n        }\n      }\n\n      //en passant\n      else if (squares[this.state.selectedIndex].getName() === \"Pawn\" && (squares[index] === this.state.selectedIndex + 7 || squares[index] === this.state.selectedIndex - 7 || squares[index] === this.state.selectedIndex + 9 || squares[index] === this.state.selectedIndex - 9) && squares[index] === null) {\n        var leftPawnPos = false;\n        var rightPawnPos = false;\n        console.log(\"enpassant\");\n        if (squares[this.state.selectedIndex + 1].getName() === \"Pawn\" && squares[this.state.selectedIndex + 1].player !== this.state.playerTurn) {\n          rightPawnPos = this.state.selectedIndex + 1;\n        }\n        if (squares[this.state.selectedIndex - 1].getName() === \"Pawn\" && squares[this.state.selectedIndex - 1].player !== this.state.playerTurn) {\n          leftPawnPos = this.state.selectedIndex - 1;\n        }\n        const validPassant = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, false, leftPawnPos, rightPawnPos);\n\n        if (validPassant) {\n          if (index === this.state.selectedIndex - 9 || index === this.state.selectedIndex - 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n\n          else if (index === this.state.selectedIndex + 9 || this.state.selectedIndex + 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n\n        }\n      }\n\n      //if destination of piece is clicked on own piece\n      else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n        console.log(\"That's your own piece wtf\");\n        this.setState({\n          squares: squares, \n          selectedIndex: -1\n        })\n      }\n\n      // if destination is not on own piece\n      else {\n        const isSquareOccupied = squares[index] === null ? false : true;\n        const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n        const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n        if (validMove) {\n          if (this.checkValidPath(pathIndicies)) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[index].handleMoved();\n            squares[this.state.selectedIndex] = null;\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            // check if king is in check\n            var check = this.isKinginCheck(index, squares);\n            this.setState({\n              squares: squares,\n              playerTurn: nextTurn,\n              selectedIndex: -1,\n              kingInCheck: check ? true:false,\n            });\n            console.log(this.state.kingInCheck);\n          }\n          else {\n            console.log(pathIndicies);\n            this.setState({\n              squares: squares, \n              selectedIndex: -1\n            });\n          }\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            squares: squares, \n            selectedIndex: -1\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board \n          squares={this.state.squares}\n          onClick={(index) => this.handleClick(index)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}