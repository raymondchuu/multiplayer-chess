{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/src/components/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport '../App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1\n    };\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[i] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  handleClick(index) {\n    const squares = this.state.squares.slice();\n    console.log(index); //piece has not been selected\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#ffcb5f\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        }; //if clicks on own piece\n\n        if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n          console.log(\"That's your own piece wtf\");\n          this.setState({\n            squares: squares,\n            selectedIndex: -1\n          });\n        } else {\n          const isSquareOccupied = squares[index] === null ? false : true;\n          const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n          const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n          if (validMove) {\n            if (this.checkValidPath(pathIndicies)) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[this.state.selectedIndex] = null;\n              var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n              this.setState({\n                squares: squares,\n                playerTurn: nextTurn,\n                selectedIndex: -1\n              });\n            } else {\n              console.log(\"not valid path\");\n            }\n          } else {\n            console.log(\"invalid move\");\n            this.setState({\n              squares: squares,\n              selectedIndex: -1\n            });\n          }\n        }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: index => this.handleClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/src/components/App.js"],"names":["React","Board","initializeChessBoard","App","Component","constructor","state","squares","playerTurn","selectedIndex","checkValidPath","path","valid","i","length","handleClick","index","slice","console","log","player","style","backgroundColor","setState","isSquareOccupied","validMove","isMoveValid","pathIndicies","getPathIndicies","nextTurn","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\n\nimport '../App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n    }\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n    \n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[i] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  handleClick(index) {\n    const squares = this.state.squares.slice();\n    console.log(index);\n    //piece has not been selected\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n        squares[index].style = {...squares[index].style, backgroundColor: \"#ffcb5f\" };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      }\n      else {\n        console.log(\"That is not your piece\");\n      }\n    }\n\n    //piece has been selected\n    else {\n      squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null}\n\n      //if clicks on own piece\n      if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n        console.log(\"That's your own piece wtf\");\n        this.setState({\n          squares: squares, \n          selectedIndex: -1\n        })\n      }\n\n      else {\n        const isSquareOccupied = squares[index] === null ? false : true;\n        const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n        const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n        if (validMove) {\n          if (this.checkValidPath(pathIndicies)) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            this.setState({\n              squares: squares,\n              playerTurn: nextTurn,\n              selectedIndex: -1\n            });\n          }\n          else {\n            console.log(\"not valid path\")\n          }\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            squares: squares, \n            selectedIndex: -1\n          })\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board \n          squares={this.state.squares}\n          onClick={(index) => this.handleClick(index)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}