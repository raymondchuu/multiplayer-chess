{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/VideoCall/VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { socket } from '../../socket/socket';\nimport Peer from 'simple-peer';\nexport default function VideoCall(props) {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    });\n    socket.on(\"hello\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    });\n  });\n\n  function callPeer(username) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: username,\n        signalData: data,\n        from: props.username,\n        gameId: props.gameId\n      });\n    });\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n  }\n\n  function acceptCall() {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"acceptCall\", {\n        signal: data,\n        to: caller,\n        gameId: props.gameId\n      });\n    });\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VideoCall, \"BA2+aTCrx41BVCbf2a0tdYE5Erk=\");\n\n_c = VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/VideoCall/VideoCall.js"],"names":["React","useRef","useState","useEffect","socket","Peer","VideoCall","props","callAccepted","setCallAccepted","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","userVideo","partnerVideo","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","data","from","signal","callPeer","username","peer","initiator","trickle","emit","userToCall","signalData","gameId","acceptCall","to"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { socket } from '../../socket/socket';\nimport Peer from 'simple-peer';\n\nexport default function VideoCall(props) {\n    const [callAccepted, setCallAccepted] = useState(false);\n    const [stream, setStream] = useState();\n    const [receivingCall, setReceivingCall] = useState(false);\n    const [caller, setCaller] = useState(\"\");\n    const [callerSignal, setCallerSignal] = useState();\n\n    const userVideo = useRef();\n    const partnerVideo = useRef();\n\n    useEffect(() => {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n        .then((stream) => {\n            setStream(stream);\n            if (userVideo.current) {\n                userVideo.current.srcObject = stream;\n            }\n        })\n\n        socket.on(\"hello\", (data) => {\n            setReceivingCall(true);\n            setCaller(data.from);\n            setCallerSignal(data.signal);\n        })\n    });\n\n    function callPeer(username) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream: stream,\n        });\n\n        peer.on(\"signal\", data => {\n            socket.emit(\"callUser\", { userToCall: username, signalData: data, from: props.username, gameId: props.gameId })\n        });\n\n        peer.on(\"stream\", stream => {\n            if (partnerVideo.current) {\n                partnerVideo.current.srcObject = stream;\n            }\n        });\n\n        socket.on(\"callAccepted\", signal => {\n            setCallAccepted(true);\n            peer.signal(signal);\n        });\n    }\n\n    function acceptCall() {\n        setCallAccepted(true);\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream: stream,\n        });\n\n        peer.on(\"signal\", data => {\n            socket.emit(\"acceptCall\", { signal: data, to: caller, gameId: props.gameId});\n        });\n\n        peer.on(\"stream\", stream => {\n            partnerVideo.current.srcObject = stream;\n        });\n\n        peer.signal(callerSignal); \n    }\n\n    return(\n        <div>\n            hi\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}