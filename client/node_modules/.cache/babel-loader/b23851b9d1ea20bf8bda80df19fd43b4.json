{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/src/components/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport '../App.css';\nimport Rook from '../pieces/Rook';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      kingInCheck: false\n    };\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (squares[index + 1].getName() === \"Rook\" && !squares[index].moved()) {\n      return true;\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[62].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {}\n          }\n        } //Long castle\n\n\n        if (index === 1) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3]) {}\n          }\n        }\n\n        if (index === 57) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59]) {}\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n    console.log(index); //highlight chess piece\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#575E6B\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        };\n        console.log(squares[this.state.selectedIndex]); // castling king and rook\n\n        if (squares[this.state.selectedIndex].getName() === \"King\") {\n          const newSquares = this.checkCastle(squares, index);\n          this.setState({\n            squares: newSquares,\n            selectedIndex: -1\n          });\n        } //if destination of piece is clicked on own piece\n        else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            this.setState({\n              squares: squares,\n              selectedIndex: -1\n            });\n          } // if destination is not on own piece\n          else {\n              const isSquareOccupied = squares[index] === null ? false : true;\n              const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n              const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n              if (validMove) {\n                if (this.checkValidPath(pathIndicies)) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[this.state.selectedIndex] = null;\n                  var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n                  this.setState({\n                    squares: squares,\n                    playerTurn: nextTurn,\n                    selectedIndex: -1\n                  });\n                } else {\n                  console.log(pathIndicies);\n                  this.setState({\n                    squares: squares,\n                    selectedIndex: -1\n                  });\n                }\n              } else {\n                console.log(\"invalid move\");\n                this.setState({\n                  squares: squares,\n                  selectedIndex: -1\n                });\n              }\n            }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: index => this.handleClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/src/components/App.js"],"names":["React","Board","initializeChessBoard","Rook","App","Component","constructor","state","squares","playerTurn","selectedIndex","kingInCheck","checkValidPath","path","valid","i","length","checkRook","index","getName","moved","checkCastle","handleClick","slice","console","log","player","style","backgroundColor","setState","newSquares","isSquareOccupied","validMove","isMoveValid","pathIndicies","getPathIndicies","nextTurn","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\n\nimport '../App.css';\nimport Rook from '../pieces/Rook';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      kingInCheck: false,\n    }\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n    \n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (squares[index + 1].getName() === \"Rook\" && !squares[index].moved()) {\n      return true;\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[62].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              \n            }\n          }\n        }\n\n        //Long castle\n        if (index === 1) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3]) {\n              \n            }\n          }\n        }\n\n        if (index === 57) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59]) {\n              \n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n\n    console.log(index);\n    //highlight chess piece\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n        squares[index].style = {...squares[index].style, backgroundColor: \"#575E6B\" };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      }\n      else {\n        console.log(\"That is not your piece\");\n      }\n    }\n\n    //piece has been selected\n    else {\n      squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null};\n\n      console.log(squares[this.state.selectedIndex]);\n\n      // castling king and rook\n      if (squares[this.state.selectedIndex].getName() === \"King\") {\n        const newSquares = this.checkCastle(squares, index);\n        this.setState({\n          squares: newSquares,\n          selectedIndex: -1\n        })\n        \n      }\n\n      //if destination of piece is clicked on own piece\n      else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n        console.log(\"That's your own piece wtf\");\n        this.setState({\n          squares: squares, \n          selectedIndex: -1\n        })\n      }\n\n      // if destination is not on own piece\n      else {\n        const isSquareOccupied = squares[index] === null ? false : true;\n        const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n        const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n        if (validMove) {\n          if (this.checkValidPath(pathIndicies)) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            this.setState({\n              squares: squares,\n              playerTurn: nextTurn,\n              selectedIndex: -1\n            });\n          }\n          else {\n            console.log(pathIndicies);\n            this.setState({\n              squares: squares, \n              selectedIndex: -1\n            });\n          }\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            squares: squares, \n            selectedIndex: -1\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board \n          squares={this.state.squares}\n          onClick={(index) => this.handleClick(index)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}