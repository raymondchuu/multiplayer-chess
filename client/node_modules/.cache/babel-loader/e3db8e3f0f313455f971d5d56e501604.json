{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/VideoCall/VideoCall.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { socket } from '../../socket/socket';\nimport Peer from 'simple-peer';\nexport default function VideoCall(props) {\n  var _s = $RefreshSig$();\n\n  function callPeer(username) {\n    _s();\n\n    const [callAccepted, setCallAccepted] = useState(false);\n    const [stream, setStream] = useState();\n    const userVideo = useRef();\n    const partnerVideo = useRef();\n    useEffect(() => {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        setStream(stream);\n\n        if (userVideo.current) {\n          userVideo.current.srcObject = stream;\n        }\n      });\n    });\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: username,\n        signalData: data,\n        from: props.username,\n        gameId: props.gameId\n      });\n    });\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n  }\n\n  _s(callPeer, \"d+OgwMkkJAKW2QCg3miKFlgnMeg=\");\n\n  function acceptCall() {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_c = VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/VideoCall/VideoCall.js"],"names":["React","useRef","useState","useEffect","socket","Peer","VideoCall","props","callPeer","username","callAccepted","setCallAccepted","stream","setStream","userVideo","partnerVideo","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","peer","initiator","trickle","on","data","emit","userToCall","signalData","from","gameId","signal","acceptCall"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAErC,WAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAAA;;AACxB,UAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,UAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,EAApC;AAEA,UAAMY,SAAS,GAAGb,MAAM,EAAxB;AACA,UAAMc,YAAY,GAAGd,MAAM,EAA3B;AAEAE,IAAAA,SAAS,CAAC,MAAM;AACZa,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAApC,EACCC,IADD,CACOT,MAAD,IAAY;AACdC,QAAAA,SAAS,CAACD,MAAD,CAAT;;AACA,YAAIE,SAAS,CAACQ,OAAd,EAAuB;AACnBR,UAAAA,SAAS,CAACQ,OAAV,CAAkBC,SAAlB,GAA8BX,MAA9B;AACH;AACJ,OAND;AAOH,KARQ,CAAT;AAUA,UAAMY,IAAI,GAAG,IAAInB,IAAJ,CAAS;AAClBoB,MAAAA,SAAS,EAAE,IADO;AAElBC,MAAAA,OAAO,EAAE,KAFS;AAGlBd,MAAAA,MAAM,EAAEA;AAHU,KAAT,CAAb;AAMAY,IAAAA,IAAI,CAACG,EAAL,CAAQ,QAAR,EAAkBC,IAAI,IAAI;AACtBxB,MAAAA,MAAM,CAACyB,IAAP,CAAY,UAAZ,EAAwB;AAAEC,QAAAA,UAAU,EAAErB,QAAd;AAAwBsB,QAAAA,UAAU,EAAEH,IAApC;AAA0CI,QAAAA,IAAI,EAAEzB,KAAK,CAACE,QAAtD;AAAgEwB,QAAAA,MAAM,EAAE1B,KAAK,CAAC0B;AAA9E,OAAxB;AACH,KAFD;AAIAT,IAAAA,IAAI,CAACG,EAAL,CAAQ,QAAR,EAAkBf,MAAM,IAAI;AACxB,UAAIG,YAAY,CAACO,OAAjB,EAA0B;AACtBP,QAAAA,YAAY,CAACO,OAAb,CAAqBC,SAArB,GAAiCX,MAAjC;AACH;AACJ,KAJD;AAMAR,IAAAA,MAAM,CAACuB,EAAP,CAAU,cAAV,EAA0BO,MAAM,IAAI;AAChCvB,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAa,MAAAA,IAAI,CAACU,MAAL,CAAYA,MAAZ;AACH,KAHD;AAIH;;AAvCoC,KAE5B1B,QAF4B;;AAyCrC,WAAS2B,UAAT,GAAsB,CACrB;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KAjDuB7B,S","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { socket } from '../../socket/socket';\nimport Peer from 'simple-peer';\n\nexport default function VideoCall(props) {\n\n    function callPeer(username) {\n        const [callAccepted, setCallAccepted] = useState(false);\n        const [stream, setStream] = useState();\n\n        const userVideo = useRef();\n        const partnerVideo = useRef();\n\n        useEffect(() => {\n            navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n            .then((stream) => {\n                setStream(stream);\n                if (userVideo.current) {\n                    userVideo.current.srcObject = stream;\n                }\n            })\n        });\n\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream: stream,\n        });\n\n        peer.on(\"signal\", data => {\n            socket.emit(\"callUser\", { userToCall: username, signalData: data, from: props.username, gameId: props.gameId })\n        });\n\n        peer.on(\"stream\", stream => {\n            if (partnerVideo.current) {\n                partnerVideo.current.srcObject = stream;\n            }\n        });\n\n        socket.on(\"callAccepted\", signal => {\n            setCallAccepted(true);\n            peer.signal(signal);\n        });\n    }\n\n    function acceptCall() {\n    }\n\n    return(\n        <div>\n            hi\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}