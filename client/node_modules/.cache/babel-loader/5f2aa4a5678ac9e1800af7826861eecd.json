{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/src/components/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport '../App.css';\nimport Rook from '../pieces/Rook';\nimport Square from './Square';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      king1InCheck: false,\n      king2InCheck: false\n    };\n  }\n\n  isMyKinginCheck(squares) {\n    var kingIndex = -1;\n    var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n\n    for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n      if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === this.state.playerTurn) {\n        kingIndex = i;\n      }\n    }\n\n    var found = false;\n\n    for (var j = 0; j < squares.length && !found; ++j) {\n      console.log(j);\n\n      if (squares[j] !== null && squares[j].player === otherPlayer) {\n        const validMove = squares[j].isMoveValid(j, kingIndex, true);\n        const path = squares[j].getPathIndicies(j, kingIndex);\n\n        if (validMove) {\n          if (this.checkValidPath(path)) {\n            found = true;\n          }\n        }\n      }\n    }\n\n    if (found) {\n      this.setState({\n        king1InCheck: true\n      });\n    } else {\n      this.setState({\n        king1InCheck: false\n      });\n    }\n  }\n\n  isEnemyKinginCheck(index, squares) {\n    var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n    var kingIndex = -1;\n\n    for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n      if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === otherPlayer) {\n        kingIndex = i;\n      }\n    }\n\n    const validMove = squares[index].isMoveValid(index, kingIndex, true);\n    const path = squares[index].getPathIndicies(index, kingIndex);\n\n    if (validMove) {\n      if (this.checkValidPath(path)) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: \"red\"\n        };\n\n        if (this.state.playerTurn === 1) {\n          this.setState({\n            king2InCheck: true\n          });\n        } else {\n          this.setState({\n            king1InCheck: true\n          });\n        }\n\n        return true;\n      } else {\n        if (this.state.playerTurn === 1) {\n          this.setState({\n            king2InCheck: false\n          });\n        }\n\n        if (this.state.playerTurn === 2) {\n          this.setState({\n            king1InCheck: false\n          });\n        }\n\n        return false;\n      }\n    }\n  }\n\n  checkPossibleMoves(index, squares) {\n    for (var i = 0; i < squares.length; ++i) {\n      var possible = squares[index].isMoveValid(index, i, true);\n\n      if (possible) {\n        squares[i] = /*#__PURE__*/_jsxDEV(Square, {\n          style: {\n            backgroundColor: 'yellow'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 22\n        }, this);\n      }\n    }\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            } else {\n              return false;\n            }\n          }\n        } //Long castle\n\n\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n    console.log(index); //highlight chess piece\n\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && squares[index].player === this.state.playerTurn) {\n        squares[index].style = { ...squares[index].style,\n          backgroundColor: \"#575E6B\"\n        };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      } else {\n        console.log(\"That is not your piece\");\n      }\n    } //piece has been selected\n    else {\n        squares[this.state.selectedIndex].style = { ...squares[this.state.selectedIndex].style,\n          backgroundColor: null\n        };\n\n        if (this.state.kingInCheck) {\n          var check = this.isKinginCheck(index, squares);\n\n          if (check) {\n            this.handleClick(index);\n          }\n        } else {\n          console.log(squares[this.state.selectedIndex]); // castling king and rook\n\n          if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = this.checkCastle(squares, index);\n\n            if (newSquares) {\n              var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n              this.setState({\n                squares: newSquares,\n                selectedIndex: -1,\n                playerTurn: nextTurn\n              });\n            } else {\n              console.log(\"invalid move\");\n              this.setState({\n                selectedIndex: -1\n              });\n            }\n          } //en passant\n          else if (squares[this.state.selectedIndex].getName() === \"Pawn\" && (squares[index] === this.state.selectedIndex + 7 || squares[index] === this.state.selectedIndex - 7 || squares[index] === this.state.selectedIndex + 9 || squares[index] === this.state.selectedIndex - 9) && squares[index] === null) {\n              var leftPawnPos = false;\n              var rightPawnPos = false;\n              console.log(\"enpassant\");\n\n              if (squares[this.state.selectedIndex + 1].getName() === \"Pawn\" && squares[this.state.selectedIndex + 1].player !== this.state.playerTurn) {\n                rightPawnPos = this.state.selectedIndex + 1;\n              }\n\n              if (squares[this.state.selectedIndex - 1].getName() === \"Pawn\" && squares[this.state.selectedIndex - 1].player !== this.state.playerTurn) {\n                leftPawnPos = this.state.selectedIndex - 1;\n              }\n\n              const validPassant = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, false, leftPawnPos, rightPawnPos);\n\n              if (validPassant) {\n                if (index === this.state.selectedIndex - 9 || index === this.state.selectedIndex - 7) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[this.state.selectedIndex] = null;\n                  squares[index + 8] = null;\n                } else if (index === this.state.selectedIndex + 9 || this.state.selectedIndex + 7) {\n                  squares[index] = squares[this.state.selectedIndex];\n                  squares[this.state.selectedIndex] = null;\n                  squares[index - 8] = null;\n                }\n              }\n            } //if destination of piece is clicked on own piece\n            else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n                console.log(\"That's your own piece wtf\");\n                this.setState({\n                  squares: squares,\n                  selectedIndex: -1\n                });\n              } // if destination is not on own piece\n              else {\n                  const isSquareOccupied = squares[index] === null ? false : true;\n                  const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n                  const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n\n                  if (validMove) {\n                    if (this.checkValidPath(pathIndicies)) {\n                      squares[index] = squares[this.state.selectedIndex];\n                      squares[index].handleMoved();\n                      squares[this.state.selectedIndex] = null;\n                      var nextTurn = this.state.playerTurn === 1 ? 2 : 1; // check if king is in check\n\n                      this.isMyKinginCheck(index, squares); //           this.isEnemyKinginCheck(index, squares);\n\n                      console.log(this.state.king1InCheck);\n                      this.setState({\n                        squares: squares,\n                        playerTurn: nextTurn,\n                        selectedIndex: -1\n                      });\n                    } else {\n                      console.log(pathIndicies);\n                      this.setState({\n                        squares: squares,\n                        selectedIndex: -1\n                      });\n                    }\n                  } else {\n                    console.log(\"invalid move\");\n                    this.setState({\n                      squares: squares,\n                      selectedIndex: -1\n                    });\n                  }\n                }\n        }\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: index => this.handleClick(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/src/components/App.js"],"names":["React","Board","initializeChessBoard","Rook","Square","App","Component","constructor","state","squares","playerTurn","selectedIndex","king1InCheck","king2InCheck","isMyKinginCheck","kingIndex","otherPlayer","i","length","getName","player","found","j","console","log","validMove","isMoveValid","path","getPathIndicies","checkValidPath","setState","isEnemyKinginCheck","index","style","backgroundColor","checkPossibleMoves","possible","valid","checkRook","moved","checkCastle","handleMoved","handleClick","slice","kingInCheck","check","isKinginCheck","newSquares","nextTurn","leftPawnPos","rightPawnPos","validPassant","isSquareOccupied","pathIndicies","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AAEA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEP,oBAAoB,EADlB;AAEXQ,MAAAA,UAAU,EAAE,CAFD;AAGXC,MAAAA,aAAa,EAAE,CAAC,CAHL;AAIXC,MAAAA,YAAY,EAAE,KAJH;AAKXC,MAAAA,YAAY,EAAE;AALH,KAAb;AAOD;;AAEDC,EAAAA,eAAe,CAACL,OAAD,EAAU;AACvB,QAAIM,SAAS,GAAG,CAAC,CAAjB;AACA,QAAIC,WAAW,GAAG,KAAKR,KAAL,CAAWE,UAAX,KAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAApD;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAAZ,IAAsBH,SAAS,GAAG,CAAlD,EAAqD,EAAEE,CAAvD,EAA0D;AACxD,UAAIR,OAAO,CAACQ,CAAD,CAAP,KAAe,IAAf,IAAuBR,OAAO,CAACQ,CAAD,CAAP,CAAWE,OAAX,OAAyB,MAAhD,IAA0DV,OAAO,CAACQ,CAAD,CAAP,CAAWG,MAAX,KAAsB,KAAKZ,KAAL,CAAWE,UAA/F,EAA2G;AACzGK,QAAAA,SAAS,GAAGE,CAAZ;AACD;AACF;;AAED,QAAII,KAAK,GAAG,KAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACS,MAAZ,IAAsB,CAACG,KAAvC,EAA8C,EAAEC,CAAhD,EAAmD;AACjDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AACA,UAAIb,OAAO,CAACa,CAAD,CAAP,KAAe,IAAf,IAAuBb,OAAO,CAACa,CAAD,CAAP,CAAWF,MAAX,KAAsBJ,WAAjD,EAA8D;AAC5D,cAAMS,SAAS,GAAGhB,OAAO,CAACa,CAAD,CAAP,CAAWI,WAAX,CAAuBJ,CAAvB,EAA0BP,SAA1B,EAAqC,IAArC,CAAlB;AACA,cAAMY,IAAI,GAAGlB,OAAO,CAACa,CAAD,CAAP,CAAWM,eAAX,CAA2BN,CAA3B,EAA8BP,SAA9B,CAAb;;AACA,YAAIU,SAAJ,EAAe;AACb,cAAI,KAAKI,cAAL,CAAoBF,IAApB,CAAJ,EAA+B;AAC7BN,YAAAA,KAAK,GAAG,IAAR;AACD;AACF;AACF;AACF;;AAED,QAAIA,KAAJ,EAAW;AACT,WAAKS,QAAL,CAAc;AACZlB,QAAAA,YAAY,EAAE;AADF,OAAd;AAGD,KAJD,MAKK;AACH,WAAKkB,QAAL,CAAc;AACZlB,QAAAA,YAAY,EAAE;AADF,OAAd;AAGD;AACF;;AAEDmB,EAAAA,kBAAkB,CAACC,KAAD,EAAQvB,OAAR,EAAiB;AACjC,QAAIO,WAAW,GAAG,KAAKR,KAAL,CAAWE,UAAX,KAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAApD;AACA,QAAIK,SAAS,GAAG,CAAC,CAAjB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAAZ,IAAsBH,SAAS,GAAG,CAAlD,EAAqD,EAAEE,CAAvD,EAA0D;AACxD,UAAIR,OAAO,CAACQ,CAAD,CAAP,KAAe,IAAf,IAAuBR,OAAO,CAACQ,CAAD,CAAP,CAAWE,OAAX,OAAyB,MAAhD,IAA0DV,OAAO,CAACQ,CAAD,CAAP,CAAWG,MAAX,KAAsBJ,WAApF,EAAiG;AAC/FD,QAAAA,SAAS,GAAGE,CAAZ;AACD;AACF;;AAED,UAAMQ,SAAS,GAAGhB,OAAO,CAACuB,KAAD,CAAP,CAAeN,WAAf,CAA2BM,KAA3B,EAAkCjB,SAAlC,EAA6C,IAA7C,CAAlB;AACA,UAAMY,IAAI,GAAGlB,OAAO,CAACuB,KAAD,CAAP,CAAeJ,eAAf,CAA+BI,KAA/B,EAAsCjB,SAAtC,CAAb;;AACA,QAAIU,SAAJ,EAAe;AACb,UAAI,KAAKI,cAAL,CAAoBF,IAApB,CAAJ,EAA+B;AAC7BlB,QAAAA,OAAO,CAACM,SAAD,CAAP,CAAmBkB,KAAnB,GAA2B,EAAC,GAAGxB,OAAO,CAACM,SAAD,CAAP,CAAmBkB,KAAvB;AAA8BC,UAAAA,eAAe,EAAE;AAA/C,SAA3B;;AACA,YAAI,KAAK1B,KAAL,CAAWE,UAAX,KAA0B,CAA9B,EAAiC;AAC/B,eAAKoB,QAAL,CAAc;AACZjB,YAAAA,YAAY,EAAE;AADF,WAAd;AAGD,SAJD,MAKK;AACH,eAAKiB,QAAL,CAAc;AACZlB,YAAAA,YAAY,EAAE;AADF,WAAd;AAGD;;AAED,eAAO,IAAP;AACD,OAdD,MAeK;AACH,YAAI,KAAKJ,KAAL,CAAWE,UAAX,KAA0B,CAA9B,EAAiC;AAC/B,eAAKoB,QAAL,CAAc;AACZjB,YAAAA,YAAY,EAAE;AADF,WAAd;AAGD;;AACD,YAAI,KAAKL,KAAL,CAAWE,UAAX,KAA0B,CAA9B,EAAiC;AAC/B,eAAKoB,QAAL,CAAc;AACZlB,YAAAA,YAAY,EAAE;AADF,WAAd;AAGD;;AAED,eAAO,KAAP;AACD;AACF;AACF;;AAEDuB,EAAAA,kBAAkB,CAACH,KAAD,EAAQvB,OAAR,EAAiB;AACjC,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,UAAImB,QAAQ,GAAG3B,OAAO,CAACuB,KAAD,CAAP,CAAeN,WAAf,CAA2BM,KAA3B,EAAkCf,CAAlC,EAAqC,IAArC,CAAf;;AACA,UAAImB,QAAJ,EAAc;AACZ3B,QAAAA,OAAO,CAACQ,CAAD,CAAP,gBAAa,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACiB,YAAAA,eAAe,EAAE;AAAlB;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAb;AACD;AACF;AACF;;AAEDL,EAAAA,cAAc,CAACF,IAAD,EAAO;AACnB,QAAIU,KAAK,GAAG,IAAZ;;AAEA,SAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,IAAI,CAACT,MAAT,IAAmBmB,KAAnC,EAA0C,EAAEpB,CAA5C,EAA+C;AAC7C,UAAI,KAAKT,KAAL,CAAWC,OAAX,CAAmBkB,IAAI,CAACV,CAAD,CAAvB,MAAgC,IAApC,EAA0C;AACxCoB,QAAAA,KAAK,GAAG,KAAR;AACD;AACF;;AAED,WAAOA,KAAP;AACD;;AAEDC,EAAAA,SAAS,CAAC7B,OAAD,EAAUuB,KAAV,EAAiB;AACxB,QAAIA,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,EAA7B,EAAiC;AAC/B,UAAIvB,OAAO,CAACuB,KAAK,GAAG,CAAT,CAAP,CAAmBb,OAAnB,OAAiC,MAAjC,IAA2C,CAACV,OAAO,CAACuB,KAAK,GAAG,CAAT,CAAP,CAAmBO,KAAnB,EAAhD,EAA4E;AAC1E,eAAO,IAAP;AACD;AACF;;AAED,QAAIP,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,EAA7B,EAAiC;AAC/B,UAAIvB,OAAO,CAACuB,KAAK,GAAG,CAAT,CAAP,CAAmBb,OAAnB,OAAiC,MAAjC,IAA2C,CAACV,OAAO,CAACuB,KAAK,GAAG,CAAT,CAAP,CAAmBO,KAAnB,EAAhD,EAA4E;AAC1E,eAAO,IAAP;AACD;AACF;AACF;;AAEDC,EAAAA,WAAW,CAAC/B,OAAD,EAAUuB,KAAV,EAAiB;AAC1B,QAAI,KAAKxB,KAAL,CAAWG,aAAX,KAA6B,CAA7B,IAAkC,KAAKH,KAAL,CAAWG,aAAX,KAA6B,EAAnE,EAAuE;AACrE,UAAI,CAACF,OAAO,CAAC,EAAD,CAAP,CAAY8B,KAAZ,EAAD,IAAwB,CAAC9B,OAAO,CAAC,EAAD,CAAP,CAAY8B,KAAZ,EAAzB,IAAgD,CAAC9B,OAAO,CAAC,CAAD,CAAP,CAAW8B,KAAX,EAAjD,IAAuE,CAAC9B,OAAO,CAAC,CAAD,CAAP,CAAW8B,KAAX,EAA5E,EAAgG;AAC9F;AACA,YAAIP,KAAK,KAAK,EAAd,EAAkB;AAChB,cAAI,KAAKM,SAAL,CAAe7B,OAAf,EAAwBuB,KAAxB,CAAJ,EAAoC;AAClC,gBAAIvB,OAAO,CAAC,EAAD,CAAP,KAAgB,IAAhB,IAAwBA,OAAO,CAAC,EAAD,CAAP,KAAgB,IAA5C,EAAkD;AAChDA,cAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,cAAAA,OAAO,CAACuB,KAAD,CAAP,CAAeS,WAAf;AACAhC,cAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACAF,cAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,IAAIN,IAAJ,CAAS,CAAT,CAAd;AACAM,cAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,IAAd;AACD,aAND,MAQK;AACH,qBAAO,KAAP;AACD;AACF;AACF;;AAED,YAAIuB,KAAK,KAAK,CAAd,EAAiB;AACf,cAAI,KAAKM,SAAL,CAAe7B,OAAf,EAAwBuB,KAAxB,CAAJ,EAAoC;AAClC,gBAAIvB,OAAO,CAAC,CAAD,CAAP,KAAe,IAAf,IAAuBA,OAAO,CAAC,CAAD,CAAP,KAAe,IAA1C,EAAgD;AAC9CA,cAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,cAAAA,OAAO,CAACuB,KAAD,CAAP,CAAeS,WAAf;AACAhC,cAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACAF,cAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIN,IAAJ,CAAS,CAAT,CAAb;AACAM,cAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAb;AACD,aAND,MAOK;AACH,qBAAO,KAAP;AACD;AACF;AACF,SA/B6F,CAiC9F;;;AACA,YAAIuB,KAAK,KAAK,CAAd,EAAiB;AACf,cAAI,KAAKM,SAAL,CAAe7B,OAAf,EAAwBuB,KAAxB,CAAJ,EAAoC;AAClC,gBAAIvB,OAAO,CAAC,CAAD,CAAP,KAAe,IAAf,IAAuBA,OAAO,CAAC,CAAD,CAAP,KAAe,IAAtC,IAA8CA,OAAO,CAAC,CAAD,CAAP,KAAe,IAAjE,EAAuE;AACrEA,cAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,cAAAA,OAAO,CAACuB,KAAD,CAAP,CAAeS,WAAf;AACAhC,cAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACAF,cAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIN,IAAJ,CAAS,CAAT,CAAb;AACAM,cAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAb;AACD,aAND,MAOK;AACH,qBAAO,KAAP;AACD;AACF;AACF;;AAED,YAAIuB,KAAK,KAAK,EAAd,EAAkB;AAChB,cAAI,KAAKM,SAAL,CAAe7B,OAAf,EAAwBuB,KAAxB,CAAJ,EAAoC;AAClC,gBAAIvB,OAAO,CAAC,EAAD,CAAP,KAAgB,IAAhB,IAAwBA,OAAO,CAAC,EAAD,CAAP,KAAgB,IAAxC,IAAgDA,OAAO,CAAC,EAAD,CAAP,KAAgB,IAApE,EAA0E;AACxEA,cAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,cAAAA,OAAO,CAACuB,KAAD,CAAP,CAAeS,WAAf;AACAhC,cAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACAF,cAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,IAAIN,IAAJ,CAAS,CAAT,CAAd;AACAM,cAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,IAAd;AACD,aAND,MAOK;AACH,qBAAO,KAAP;AACD;AACF;AACF;;AAED,eAAOA,OAAP;AACD;AACF;AACF;;AAEDiC,EAAAA,WAAW,CAACV,KAAD,EAAQ;AACjB;AACA,UAAMvB,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBkC,KAAnB,EAAhB;AAEApB,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ,EAJiB,CAKjB;;AACA,QAAI,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAA/B,EAAkC;AAChC,UAAIF,OAAO,CAACuB,KAAD,CAAP,IAAmBvB,OAAO,CAACuB,KAAD,CAAP,CAAeZ,MAAf,KAA0B,KAAKZ,KAAL,CAAWE,UAA5D,EAAyE;AACvED,QAAAA,OAAO,CAACuB,KAAD,CAAP,CAAeC,KAAf,GAAuB,EAAC,GAAGxB,OAAO,CAACuB,KAAD,CAAP,CAAeC,KAAnB;AAA0BC,UAAAA,eAAe,EAAE;AAA3C,SAAvB;AACA,aAAKJ,QAAL,CAAc;AACZrB,UAAAA,OAAO,EAAEA,OADG;AAEZE,UAAAA,aAAa,EAAEqB;AAFH,SAAd;AAID,OAND,MAOK;AACHT,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,KAXD,CAaA;AAbA,SAcK;AACHf,QAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCsB,KAAlC,GAA0C,EAAC,GAAGxB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCsB,KAAtC;AAA6CC,UAAAA,eAAe,EAAE;AAA9D,SAA1C;;AAEA,YAAI,KAAK1B,KAAL,CAAWoC,WAAf,EAA4B;AAC1B,cAAIC,KAAK,GAAG,KAAKC,aAAL,CAAmBd,KAAnB,EAA0BvB,OAA1B,CAAZ;;AACA,cAAIoC,KAAJ,EAAW;AACT,iBAAKH,WAAL,CAAiBV,KAAjB;AACD;AACF,SALD,MAMK;AAGLT,UAAAA,OAAO,CAACC,GAAR,CAAYf,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAnB,EAHK,CAIL;;AACA,cAAIF,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCQ,OAAlC,OAAgD,MAAhD,IAA0D,CAACV,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkC4B,KAAlC,EAA3D,KAAyGP,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,CAAzB,IAA8BA,KAAK,KAAK,EAAxC,IAA8CA,KAAK,KAAK,EAAjK,CAAJ,EAA0K;AACxK,kBAAMe,UAAU,GAAG,KAAKP,WAAL,CAAiB/B,OAAjB,EAA0BuB,KAA1B,CAAnB;;AACA,gBAAIe,UAAJ,EAAgB;AACd,kBAAIC,QAAQ,GAAG,KAAKxC,KAAL,CAAWE,UAAX,KAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAAjD;AACA,mBAAKoB,QAAL,CAAc;AACZrB,gBAAAA,OAAO,EAAEsC,UADG;AAEZpC,gBAAAA,aAAa,EAAE,CAAC,CAFJ;AAGZD,gBAAAA,UAAU,EAAEsC;AAHA,eAAd;AAKD,aAPD,MAQK;AACHzB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,mBAAKM,QAAL,CAAc;AACZnB,gBAAAA,aAAa,EAAE,CAAC;AADJ,eAAd;AAID;AACF,WAjBD,CAmBA;AAnBA,eAoBK,IAAIF,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCQ,OAAlC,OAAgD,MAAhD,KAA2DV,OAAO,CAACuB,KAAD,CAAP,KAAmB,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAA9C,IAAmDF,OAAO,CAACuB,KAAD,CAAP,KAAmB,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAAjG,IAAsGF,OAAO,CAACuB,KAAD,CAAP,KAAmB,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAApJ,IAAyJF,OAAO,CAACuB,KAAD,CAAP,KAAmB,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAAlQ,KAAwQF,OAAO,CAACuB,KAAD,CAAP,KAAmB,IAA/R,EAAqS;AACxS,kBAAIiB,WAAW,GAAG,KAAlB;AACA,kBAAIC,YAAY,GAAG,KAAnB;AACA3B,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,kBAAIf,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAX,GAA2B,CAA5B,CAAP,CAAsCQ,OAAtC,OAAoD,MAApD,IAA8DV,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAX,GAA2B,CAA5B,CAAP,CAAsCS,MAAtC,KAAiD,KAAKZ,KAAL,CAAWE,UAA9H,EAA0I;AACxIwC,gBAAAA,YAAY,GAAG,KAAK1C,KAAL,CAAWG,aAAX,GAA2B,CAA1C;AACD;;AACD,kBAAIF,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAX,GAA2B,CAA5B,CAAP,CAAsCQ,OAAtC,OAAoD,MAApD,IAA8DV,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAX,GAA2B,CAA5B,CAAP,CAAsCS,MAAtC,KAAiD,KAAKZ,KAAL,CAAWE,UAA9H,EAA0I;AACxIuC,gBAAAA,WAAW,GAAG,KAAKzC,KAAL,CAAWG,aAAX,GAA2B,CAAzC;AACD;;AACD,oBAAMwC,YAAY,GAAG1C,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCe,WAAlC,CAA8C,KAAKlB,KAAL,CAAWG,aAAzD,EAAwEqB,KAAxE,EAA+E,KAA/E,EAAsFiB,WAAtF,EAAmGC,YAAnG,CAArB;;AAEA,kBAAIC,YAAJ,EAAkB;AAChB,oBAAInB,KAAK,KAAK,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAArC,IAA0CqB,KAAK,KAAK,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAAnF,EAAsF;AACpFF,kBAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,kBAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACAF,kBAAAA,OAAO,CAACuB,KAAK,GAAG,CAAT,CAAP,GAAqB,IAArB;AACD,iBAJD,MAMK,IAAIA,KAAK,KAAK,KAAKxB,KAAL,CAAWG,aAAX,GAA2B,CAArC,IAA0C,KAAKH,KAAL,CAAWG,aAAX,GAA2B,CAAzE,EAA4E;AAC/EF,kBAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,kBAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACAF,kBAAAA,OAAO,CAACuB,KAAK,GAAG,CAAT,CAAP,GAAqB,IAArB;AACD;AAEF;AACF,aA1BI,CA4BL;AA5BK,iBA6BA,IAAIvB,OAAO,CAACuB,KAAD,CAAP,KAAmB,IAAnB,IAA2BvB,OAAO,CAACuB,KAAD,CAAP,CAAeZ,MAAf,KAA0B,KAAKZ,KAAL,CAAWE,UAApE,EAAgF;AACnFa,gBAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,qBAAKM,QAAL,CAAc;AACZrB,kBAAAA,OAAO,EAAEA,OADG;AAEZE,kBAAAA,aAAa,EAAE,CAAC;AAFJ,iBAAd;AAID,eANI,CAQL;AARK,mBASA;AACH,wBAAMyC,gBAAgB,GAAG3C,OAAO,CAACuB,KAAD,CAAP,KAAmB,IAAnB,GAA0B,KAA1B,GAAkC,IAA3D;AACA,wBAAMP,SAAS,GAAGhB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCe,WAAlC,CAA8C,KAAKlB,KAAL,CAAWG,aAAzD,EAAwEqB,KAAxE,EAA+EoB,gBAA/E,CAAlB;AACA,wBAAMC,YAAY,GAAG5C,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,CAAkCiB,eAAlC,CAAkD,KAAKpB,KAAL,CAAWG,aAA7D,EAA4EqB,KAA5E,CAArB;;AACA,sBAAIP,SAAJ,EAAe;AACb,wBAAI,KAAKI,cAAL,CAAoBwB,YAApB,CAAJ,EAAuC;AACrC5C,sBAAAA,OAAO,CAACuB,KAAD,CAAP,GAAiBvB,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAxB;AACAF,sBAAAA,OAAO,CAACuB,KAAD,CAAP,CAAeS,WAAf;AACAhC,sBAAAA,OAAO,CAAC,KAAKD,KAAL,CAAWG,aAAZ,CAAP,GAAoC,IAApC;AACA,0BAAIqC,QAAQ,GAAG,KAAKxC,KAAL,CAAWE,UAAX,KAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAAjD,CAJqC,CAKrC;;AACA,2BAAKI,eAAL,CAAqBkB,KAArB,EAA4BvB,OAA5B,EANqC,CAOhD;;AACWc,sBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAL,CAAWI,YAAvB;AAEA,2BAAKkB,QAAL,CAAc;AACZrB,wBAAAA,OAAO,EAAEA,OADG;AAEZC,wBAAAA,UAAU,EAAEsC,QAFA;AAGZrC,wBAAAA,aAAa,EAAE,CAAC;AAHJ,uBAAd;AAOD,qBAjBD,MAkBK;AACHY,sBAAAA,OAAO,CAACC,GAAR,CAAY6B,YAAZ;AACA,2BAAKvB,QAAL,CAAc;AACZrB,wBAAAA,OAAO,EAAEA,OADG;AAEZE,wBAAAA,aAAa,EAAE,CAAC;AAFJ,uBAAd;AAID;AACF,mBA1BD,MA2BK;AACHY,oBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,yBAAKM,QAAL,CAAc;AACZrB,sBAAAA,OAAO,EAAEA,OADG;AAEZE,sBAAAA,aAAa,EAAE,CAAC;AAFJ,qBAAd;AAID;AACF;AACF;AACF;AACA;;AAED2C,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE,QAAC,KAAD;AACE,QAAA,OAAO,EAAE,KAAK9C,KAAL,CAAWC,OADtB;AAEE,QAAA,OAAO,EAAGuB,KAAD,IAAW,KAAKU,WAAL,CAAiBV,KAAjB;AAFtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAvV+B;;AA0VlC,eAAe3B,GAAf","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\n\nimport '../App.css';\nimport Rook from '../pieces/Rook';\nimport Square from './Square';\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      squares: initializeChessBoard(),\n      playerTurn: 1,\n      selectedIndex: -1,\n      king1InCheck: false,\n      king2InCheck: false\n    }\n  }\n\n  isMyKinginCheck(squares) {\n    var kingIndex = -1;\n    var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n    for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n      if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === this.state.playerTurn) {\n        kingIndex = i;\n      }\n    }\n    \n    var found = false;\n\n    for (var j = 0; j < squares.length && !found; ++j) {\n      console.log(j);\n      if (squares[j] !== null && squares[j].player === otherPlayer) {\n        const validMove = squares[j].isMoveValid(j, kingIndex, true);\n        const path = squares[j].getPathIndicies(j, kingIndex);\n        if (validMove) {\n          if (this.checkValidPath(path)) {\n            found = true;\n          }\n        }\n      }\n    }\n\n    if (found) {\n      this.setState({\n        king1InCheck: true\n      })\n    }\n    else {\n      this.setState({\n        king1InCheck: false\n      })\n    }\n  }\n\n  isEnemyKinginCheck(index, squares) {\n    var otherPlayer = this.state.playerTurn === 1 ? 2 : 1;\n    var kingIndex = -1;\n    for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n      if (squares[i] !== null && squares[i].getName() === \"King\" && squares[i].player === otherPlayer) {\n        kingIndex = i;\n      }\n    }\n\n    const validMove = squares[index].isMoveValid(index, kingIndex, true);\n    const path = squares[index].getPathIndicies(index, kingIndex);\n    if (validMove) {\n      if (this.checkValidPath(path)) {\n        squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: \"red\" };\n        if (this.state.playerTurn === 1) {\n          this.setState({\n            king2InCheck: true\n          })\n        }\n        else {\n          this.setState({\n            king1InCheck: true\n          })\n        }\n\n        return true;\n      }\n      else {\n        if (this.state.playerTurn === 1) {\n          this.setState({\n            king2InCheck: false\n          })\n        }\n        if (this.state.playerTurn === 2) {\n          this.setState({\n            king1InCheck: false\n          })\n        }\n\n        return false;\n      }\n    }\n  }\n\n  checkPossibleMoves(index, squares) {\n    for (var i = 0; i < squares.length; ++i) {\n      var possible = squares[index].isMoveValid(index, i, true);\n      if (possible) {\n        squares[i] = <Square style={{backgroundColor: 'yellow'}}/>;\n      }\n    }\n  }\n\n  checkValidPath(path) {\n    var valid = true;\n    \n    for (var i = 0; i < path.length && valid; ++i) {\n      if (this.state.squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].getName() === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].getName() === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  checkCastle(squares, index) {\n    if (this.state.selectedIndex === 4 || this.state.selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (this.checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            }\n\n            else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (this.checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        //Long castle\n        if (index === 2) {\n          if (this.checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (this.checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[this.state.selectedIndex];\n              squares[index].handleMoved();\n              squares[this.state.selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            }\n            else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  handleClick(index) {\n    //shallow copy squares \n    const squares = this.state.squares.slice();\n\n    console.log(index);\n    //highlight chess piece\n    if (this.state.selectedIndex < 0) {\n      if (squares[index] && (squares[index].player === this.state.playerTurn)) {\n        squares[index].style = {...squares[index].style, backgroundColor: \"#575E6B\" };\n        this.setState({\n          squares: squares,\n          selectedIndex: index\n        });\n      }\n      else {\n        console.log(\"That is not your piece\");\n      }\n    }\n\n    //piece has been selected\n    else {\n      squares[this.state.selectedIndex].style = {...squares[this.state.selectedIndex].style, backgroundColor: null};\n\n      if (this.state.kingInCheck) {\n        var check = this.isKinginCheck(index, squares);\n        if (check) {\n          this.handleClick(index);\n        }\n      }\n      else {\n\n      \n      console.log(squares[this.state.selectedIndex]);\n      // castling king and rook\n      if (squares[this.state.selectedIndex].getName() === \"King\" && !squares[this.state.selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n        const newSquares = this.checkCastle(squares, index);\n        if (newSquares) {\n          var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n          this.setState({\n            squares: newSquares,\n            selectedIndex: -1,\n            playerTurn: nextTurn\n          })\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            selectedIndex: -1\n\n          })\n        }\n      }\n\n      //en passant\n      else if (squares[this.state.selectedIndex].getName() === \"Pawn\" && (squares[index] === this.state.selectedIndex + 7 || squares[index] === this.state.selectedIndex - 7 || squares[index] === this.state.selectedIndex + 9 || squares[index] === this.state.selectedIndex - 9) && squares[index] === null) {\n        var leftPawnPos = false;\n        var rightPawnPos = false;\n        console.log(\"enpassant\");\n        if (squares[this.state.selectedIndex + 1].getName() === \"Pawn\" && squares[this.state.selectedIndex + 1].player !== this.state.playerTurn) {\n          rightPawnPos = this.state.selectedIndex + 1;\n        }\n        if (squares[this.state.selectedIndex - 1].getName() === \"Pawn\" && squares[this.state.selectedIndex - 1].player !== this.state.playerTurn) {\n          leftPawnPos = this.state.selectedIndex - 1;\n        }\n        const validPassant = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, false, leftPawnPos, rightPawnPos);\n\n        if (validPassant) {\n          if (index === this.state.selectedIndex - 9 || index === this.state.selectedIndex - 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n\n          else if (index === this.state.selectedIndex + 9 || this.state.selectedIndex + 7) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[this.state.selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n\n        }\n      }\n\n      //if destination of piece is clicked on own piece\n      else if (squares[index] !== null && squares[index].player === this.state.playerTurn) {\n        console.log(\"That's your own piece wtf\");\n        this.setState({\n          squares: squares, \n          selectedIndex: -1\n        })\n      }\n\n      // if destination is not on own piece\n      else {\n        const isSquareOccupied = squares[index] === null ? false : true;\n        const validMove = squares[this.state.selectedIndex].isMoveValid(this.state.selectedIndex, index, isSquareOccupied);\n        const pathIndicies = squares[this.state.selectedIndex].getPathIndicies(this.state.selectedIndex, index);\n        if (validMove) {\n          if (this.checkValidPath(pathIndicies)) {\n            squares[index] = squares[this.state.selectedIndex];\n            squares[index].handleMoved();\n            squares[this.state.selectedIndex] = null;\n            var nextTurn = this.state.playerTurn === 1 ? 2 : 1;\n            // check if king is in check\n            this.isMyKinginCheck(index, squares);\n //           this.isEnemyKinginCheck(index, squares);\n            console.log(this.state.king1InCheck);\n\n            this.setState({\n              squares: squares,\n              playerTurn: nextTurn,\n              selectedIndex: -1,\n            });\n            \n            \n          }\n          else {\n            console.log(pathIndicies);\n            this.setState({\n              squares: squares, \n              selectedIndex: -1\n            });\n          }\n        }\n        else {\n          console.log(\"invalid move\");\n          this.setState({\n            squares: squares, \n            selectedIndex: -1\n          });\n        }\n      }\n    }\n  }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board \n          squares={this.state.squares}\n          onClick={(index) => this.handleClick(index)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}