{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondChu/react-chess/client/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport queryString from 'query-string';\nimport { socket } from '../socket/socket';\nexport default function Game(props) {\n  _s();\n\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n  const [playerTurn, setPlayerTurn] = useState(1);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [king1InCheck, setKing1InCheck] = useState(false);\n  const [usernames, setUsernames] = useState([]);\n  const [validMove, setValidMove] = useState(false);\n  const [start, setStart] = useState(false);\n  useEffect(() => {\n    socket.on('userMove', state => {\n      if (state.validMove) {\n        var temp = squares.slice();\n        temp[state.endIndex] = temp[state.initialIndex];\n        temp[state.initialIndex] = null;\n        setSquares(temp);\n        setSelectedIndex(-1);\n        setValidMove(false);\n        setPlayerTurn(playerTurn === 1 ? 2 : 1);\n      }\n    });\n    socket.off();\n  });\n  useEffect(() => {\n    socket.emit(\"shouldGameStart\", props.gameId);\n    socket.on(\"start game\", users => {\n      setStart(true);\n      setUsernames(users);\n    });\n  }, []);\n\n  function handleEnPassant(squares, index) {\n    if (playerTurn === 1) {\n      //left en passant\n      if (index === selectedIndex - 9) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index + 8] = null;\n      } //right en passant\n\n\n      if (index === selectedIndex - 7) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index + 8] = null;\n      }\n    } else {\n      //left en passant\n      if (index === selectedIndex + 7) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index - 8] = null;\n      } //right en passant\n\n\n      if (index === selectedIndex + 9) {\n        squares[index] = squares[selectedIndex];\n        squares[selectedIndex] = null;\n        squares[index - 8] = null;\n      }\n    }\n\n    return squares;\n  }\n\n  function checkEnPassant(squares, index) {\n    const enPassantPositions = {\n      1: [24, 25, 26, 27, 28, 29, 30, 31],\n      2: [32, 33, 34, 35, 36, 37, 38, 39]\n    };\n    const otherPlayer = playerTurn === 1 ? 2 : 1;\n\n    if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n      //left en passant\n      console.log(\"first check\");\n      console.log(squares[selectedIndex - 9] === index);\n\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n        console.log(\"second check\");\n        return true;\n      }\n\n      if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n        return true;\n      }\n    }\n\n    if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n        return true;\n      }\n\n      if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isMyKinginCheck(squares) {\n    return new Promise((resolve, reject) => {\n      var kingIndex = -1;\n      var check = false;\n      var otherPlayer = playerTurn === 1 ? 2 : 1;\n\n      for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n        if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n          kingIndex = i;\n        }\n      }\n\n      var found = false;\n      console.log(kingIndex);\n\n      for (var j = 0; j < squares.length && !found; ++j) {\n        if (squares[j] !== null && squares[j].player === otherPlayer) {\n          const validMove = squares[j].isMoveValid(j, kingIndex, true);\n          const path = squares[j].getPathIndicies(j, kingIndex);\n\n          if (validMove) {\n            const validPath = checkValidPath(squares, path);\n            console.log(j, kingIndex, squares[42]);\n\n            if (validPath) {\n              found = true;\n            }\n          }\n        }\n      }\n\n      if (found) {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: 'red'\n        };\n        check = true;\n      } else {\n        squares[kingIndex].style = { ...squares[kingIndex].style,\n          backgroundColor: null\n        };\n        check = false;\n      }\n\n      resolve(check);\n    });\n  }\n\n  function checkValidPath(squares, path) {\n    var valid = true;\n\n    for (var i = 0; i < path.length && valid; ++i) {\n      if (squares[path[i]] !== null) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n\n  function checkRook(squares, index) {\n    if (index === 6 || index === 62) {\n      if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n        return true;\n      }\n    }\n\n    if (index === 2 || index === 58) {\n      if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n        return true;\n      }\n    }\n  }\n\n  function checkCastle(squares, index) {\n    if (selectedIndex === 4 || selectedIndex === 60) {\n      if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n        //short castle\n        if (index === 62) {\n          if (checkRook(squares, index)) {\n            if (squares[61] === null && squares[62] === null) {\n              squares[index] = squares[selectedIndex];\n              squares[index].handleMoved();\n              squares[selectedIndex] = null;\n              squares[61] = new Rook(1);\n              squares[63] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 6) {\n          if (checkRook(squares, index)) {\n            if (squares[5] === null && squares[6] === null) {\n              squares[index] = squares[selectedIndex];\n              squares[index].handleMoved();\n              squares[selectedIndex] = null;\n              squares[5] = new Rook(2);\n              squares[7] = null;\n            } else {\n              return false;\n            }\n          }\n        } //Long castle\n\n\n        if (index === 2) {\n          if (checkRook(squares, index)) {\n            if (squares[1] === null && squares[2] === null && squares[3] === null) {\n              squares[index] = squares[selectedIndex];\n              squares[index].handleMoved();\n              squares[selectedIndex] = null;\n              squares[3] = new Rook(2);\n              squares[0] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (index === 58) {\n          if (checkRook(squares, index)) {\n            if (squares[57] === null && squares[58] === null && squares[59] === null) {\n              squares[index] = squares[selectedIndex];\n              squares[index].handleMoved();\n              squares[selectedIndex] = null;\n              squares[59] = new Rook(1);\n              squares[56] = null;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return squares;\n      }\n    }\n  }\n\n  function handleClick(index) {\n    var player = usernames[0] === props.username ? 1 : 2;\n\n    if (player === playerTurn) {\n      //shallow copy squares \n      const tempsquares = squares.slice();\n      console.log(index); //highlight chess piece\n\n      if (selectedIndex < 0) {\n        if (tempsquares[index] && tempsquares[index].player === playerTurn) {\n          tempsquares[index].style = { ...tempsquares[index].style,\n            backgroundColor: \"#575E6B\"\n          };\n          setSquares(tempsquares);\n          setSelectedIndex(index);\n          setValidMove(false);\n        } else {\n          console.log(\"That is not your piece\");\n        }\n      } //piece has been selected\n      else {\n          tempsquares[selectedIndex].style = { ...squares[selectedIndex].style,\n            backgroundColor: null\n          }; // castling king and rook\n\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = checkCastle(tempsquares, index);\n\n            if (newSquares) {\n              var nextTurn = playerTurn === 1 ? 2 : 1;\n              setSquares(newSquares);\n              setSelectedIndex(-1);\n              setPlayerTurn(nextTurn);\n            } else {\n              console.log(\"invalid move\");\n              setSelectedIndex(-1);\n            }\n          } //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n              const newSquares = handleEnPassant(tempsquares, index);\n              var nextTurn = playerTurn === 1 ? 2 : 1;\n              setSquares(newSquares);\n              setSelectedIndex(-1);\n              setPlayerTurn(nextTurn);\n            } //if destination of piece is clicked on own piece\n            else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n                console.log(\"That's your own piece wtf\");\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              } // if destination is not on own piece\n              else {\n                  console.log(tempsquares[selectedIndex]);\n                  const lastRows = {\n                    1: [0, 1, 2, 3, 4, 5, 6, 7],\n                    2: [56, 57, 58, 59, 60, 61, 62, 63]\n                  };\n                  const isSquareOccupied = tempsquares[index] === null ? false : true;\n                  const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n                  const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n\n                  if (validMove) {\n                    const validPath = checkValidPath(tempsquares, pathIndicies);\n\n                    if (validPath) {\n                      tempsquares[index] = tempsquares[selectedIndex];\n                      tempsquares[index].handleMoved();\n                      tempsquares[selectedIndex] = null;\n                      console.log(tempsquares[index]); // pawn to queen\n\n                      if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                        tempsquares[index] = null;\n                        tempsquares[index] = new Queen(1);\n                      }\n\n                      if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                        tempsquares[index] = null;\n                        tempsquares[index] = new Queen(2);\n                      } // check if king is in check with shallow copied board\n\n\n                      isMyKinginCheck(tempsquares).then(check => {\n                        console.log(check);\n\n                        if (check) {\n                          console.log(\"Move your king white!\");\n                          tempsquares[selectedIndex] = tempsquares[index];\n                          tempsquares[index] = null;\n                          setSquares(tempsquares);\n                          setSelectedIndex(-1);\n                          setKing1InCheck(check);\n                        } else {\n                          var nextTurn = playerTurn === 1 ? 2 : 1;\n                          console.log(index);\n                          setValidMove(true);\n                          /*                    setSquares(tempsquares);\n                                              setSelectedIndex(-1);\n                                              setPlayerTurn(nextTurn); */\n\n                          socket.emit('move', {\n                            initialIndex: selectedIndex,\n                            endIndex: index,\n                            gameId: props.gameId,\n                            validMove: validMove\n                          });\n                        }\n                      }).catch(err => {\n                        console.log(err);\n                      });\n                    } else {\n                      console.log(\"invalid path\", pathIndicies);\n                      setSquares(tempsquares);\n                      setSelectedIndex(-1);\n                    }\n                  } else {\n                    console.log(\"invalid move\");\n                    setSquares(tempsquares);\n                    setSelectedIndex(-1);\n                  }\n                }\n        }\n    } else {\n      console.log(\"not your turn\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: start ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: usernames[0] === props.username ? usernames[1] : usernames[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        onClick: index => handleClick(index),\n        player: usernames[0] === props.username ? 1 : 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: usernames[0] === props.username ? usernames[0] : usernames[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Welcome to online chess! Send this link with a friend to start your chess game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: window.location,\n          disabled: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for game to start ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"N77vv2x44d1Km3hJBlWG54Uzzc8=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/RaymondChu/react-chess/client/src/components/Game.js"],"names":["React","useState","useEffect","Board","initializeChessBoard","Rook","Queen","queryString","socket","Game","props","squares","setSquares","playerTurn","setPlayerTurn","selectedIndex","setSelectedIndex","king1InCheck","setKing1InCheck","usernames","setUsernames","validMove","setValidMove","start","setStart","on","state","temp","slice","endIndex","initialIndex","off","emit","gameId","users","handleEnPassant","index","checkEnPassant","enPassantPositions","otherPlayer","name","indexOf","console","log","player","doubleJump","isMyKinginCheck","Promise","resolve","reject","kingIndex","check","i","length","found","j","isMoveValid","path","getPathIndicies","validPath","checkValidPath","style","backgroundColor","valid","checkRook","moved","checkCastle","handleMoved","handleClick","username","tempsquares","newSquares","nextTurn","lastRows","isSquareOccupied","pathIndicies","then","catch","err","window","location"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport initializeChessBoard from '../helpers/InitializeChessBoard';\nimport Rook from '../pieces/Rook';\nimport Queen from '../pieces/Queen';\nimport queryString from 'query-string';\nimport { socket } from '../socket/socket';\n\nexport default function Game(props) {\n  const [squares, setSquares] = useState(initializeChessBoard(1));\n    const [playerTurn, setPlayerTurn] = useState(1);\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    const [king1InCheck, setKing1InCheck] = useState(false);\n    const [usernames, setUsernames] = useState([]);\n    const [validMove, setValidMove] = useState(false);\n    const [start, setStart] = useState(false);\n\n    useEffect(() => {\n      socket.on('userMove', (state) => {\n        if (state.validMove) {\n          var temp = squares.slice();\n          temp[state.endIndex] = temp[state.initialIndex];\n          temp[state.initialIndex] = null;\n  \n          setSquares(temp);\n          setSelectedIndex(-1);\n          setValidMove(false);\n          setPlayerTurn(playerTurn === 1 ? 2 : 1);\n        }\n      })\n      socket.off();\n    });\n\n     useEffect(() => {\n      socket.emit(\"shouldGameStart\", props.gameId);\n\n      socket.on(\"start game\", (users) => {\n        setStart(true);\n        setUsernames(users);\n      });\n    }, []); \n\n    function handleEnPassant(squares, index) {\n        if (playerTurn === 1) {\n          //left en passant\n          if (index === selectedIndex - 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        \n          //right en passant\n          if (index === selectedIndex - 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index + 8] = null;\n          }\n        }\n    \n        else {\n          //left en passant\n          if (index === selectedIndex + 7) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n    \n          //right en passant\n          if (index === selectedIndex + 9) {\n            squares[index] = squares[selectedIndex];\n            squares[selectedIndex] = null;\n            squares[index - 8] = null;\n          }\n        }\n    \n        return squares;\n    }\n    \n    function checkEnPassant(squares, index) {\n        const enPassantPositions = {\n          1: [24, 25, 26, 27, 28, 29, 30, 31],\n          2: [32, 33, 34, 35, 36, 37, 38, 39]\n        }\n        const otherPlayer = playerTurn === 1 ? 2 : 1;\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[1].indexOf(selectedIndex) >= 0 && playerTurn === 1) {\n          //left en passant\n          console.log(\"first check\");\n          console.log(squares[selectedIndex - 9] === index);\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex - 9) {\n            console.log(\"second check\");\n            return true;\n          }\n          if (squares[selectedIndex + 1] !== null && squares[selectedIndex + 1].name === \"Pawn\" && squares[selectedIndex + 1].player === otherPlayer && squares[selectedIndex + 1].doubleJump && index === selectedIndex - 7) {\n            return true;\n          }\n        }\n    \n        if (squares[selectedIndex].name === \"Pawn\" && enPassantPositions[2].indexOf(selectedIndex) >= 0 && playerTurn === 2) {\n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 7) {\n            return true;\n          }      \n          if (squares[selectedIndex - 1] !== null && squares[selectedIndex - 1].name === \"Pawn\" && squares[selectedIndex - 1].player === otherPlayer && squares[selectedIndex - 1].doubleJump && index === selectedIndex + 9) {\n            return true;\n          }\n        }\n    \n        return false;\n    }\n    \n    function isMyKinginCheck(squares) {\n        return new Promise((resolve, reject) => {\n    \n        var kingIndex = -1;\n        var check = false;\n        var otherPlayer = playerTurn === 1 ? 2 : 1;\n        for (var i = 0; i < squares.length && kingIndex < 0; ++i) {\n          if (squares[i] !== null && squares[i].name === \"King\" && squares[i].player === playerTurn) {\n            kingIndex = i;\n          }\n        }\n        \n        var found = false;\n        console.log(kingIndex);\n    \n        for (var j = 0; j < squares.length && !found; ++j) {\n          if (squares[j] !== null && squares[j].player === otherPlayer) {\n            const validMove = squares[j].isMoveValid(j, kingIndex, true);\n            const path = squares[j].getPathIndicies(j, kingIndex);\n            if (validMove) {\n              const validPath = checkValidPath(squares, path);\n              console.log(j, kingIndex, squares[42])\n              if (validPath) {\n                found = true;\n              }\n            }\n          }\n        }\n    \n        if (found) {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: 'red'}\n          check = true;\n        }\n        else {\n          squares[kingIndex].style = {...squares[kingIndex].style, backgroundColor: null}\n          check = false;\n        }\n        resolve(check);\n      })\n    }\n    \n    function checkValidPath(squares, path) {\n        var valid = true;\n        \n        for (var i = 0; i < path.length && valid; ++i) {\n          if (squares[path[i]] !== null) {\n            valid = false;\n          }\n        }\n    \n        return valid;\n    }\n    \n    function checkRook(squares, index) {\n        if (index === 6 || index === 62) {\n          if (squares[index + 1].name === \"Rook\" && !squares[index + 1].moved()) {\n            return true;\n          }\n        }\n    \n        if (index === 2 || index === 58) {\n          if (squares[index - 2].name === \"Rook\" && !squares[index - 2].moved()) {\n            return true;\n          }\n        }\n    }\n    \n    function checkCastle(squares, index) {\n        if (selectedIndex === 4 || selectedIndex === 60) {\n          if (!squares[63].moved() || !squares[56].moved() || !squares[0].moved() || !squares[7].moved()) {\n            //short castle\n            if (index === 62) {\n              if (checkRook(squares, index)) {\n                if (squares[61] === null && squares[62] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[61] = new Rook(1);\n                  squares[63] = null;\n                }\n    \n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 6) {\n              if (checkRook(squares, index)) {\n                if (squares[5] === null && squares[6] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[5] = new Rook(2);\n                  squares[7] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            //Long castle\n            if (index === 2) {\n              if (checkRook(squares, index)) {\n                if (squares[1] === null && squares[2] === null && squares[3] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[3] = new Rook(2);\n                  squares[0] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            if (index === 58) {\n              if (checkRook(squares, index)) {\n                if (squares[57] === null && squares[58] === null && squares[59] === null) {\n                  squares[index] = squares[selectedIndex];\n                  squares[index].handleMoved();\n                  squares[selectedIndex] = null;\n                  squares[59] = new Rook(1);\n                  squares[56] = null;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n    \n            return squares;\n          }\n        }\n    }\n    \n    \n    function handleClick(index) {\n      var player = usernames[0] === props.username ? 1 : 2;\n      if (player === playerTurn) {\n        //shallow copy squares \n        const tempsquares = squares.slice();\n    \n        console.log(index);\n        //highlight chess piece\n        if (selectedIndex < 0) {\n          if (tempsquares[index] && (tempsquares[index].player === playerTurn)) {\n            tempsquares[index].style = {...tempsquares[index].style, backgroundColor: \"#575E6B\" };\n            setSquares(tempsquares);\n            setSelectedIndex(index);\n            setValidMove(false);\n\n          }\n          else {\n            console.log(\"That is not your piece\");\n          }\n        }\n    \n        //piece has been selected\n        else {\n          tempsquares[selectedIndex].style = {...squares[selectedIndex].style, backgroundColor: null};\n    \n          // castling king and rook\n          if (tempsquares[selectedIndex] !== null && tempsquares[selectedIndex].name === \"King\" && !tempsquares[selectedIndex].moved() && (index === 2 || index === 6 || index === 58 || index === 62)) {\n            const newSquares = checkCastle(tempsquares, index);\n            if (newSquares) {\n              var nextTurn = playerTurn === 1 ? 2 : 1;\n              setSquares(newSquares);\n              setSelectedIndex(-1);\n              setPlayerTurn(nextTurn);\n            }\n            else {\n              console.log(\"invalid move\");\n              setSelectedIndex(-1);\n            }\n          }\n    \n          //en passant\n          else if (checkEnPassant(tempsquares, index)) {\n            const newSquares = handleEnPassant(tempsquares, index);\n            var nextTurn = playerTurn === 1 ? 2 : 1;\n            setSquares(newSquares);\n            setSelectedIndex(-1);\n            setPlayerTurn(nextTurn);\n          }\n    \n          //if destination of piece is clicked on own piece\n          else if (tempsquares[index] !== null && tempsquares[index].player === playerTurn) {\n            console.log(\"That's your own piece wtf\");\n            setSquares(tempsquares);\n            setSelectedIndex(-1);\n          }\n    \n          // if destination is not on own piece\n          else {\n            console.log(tempsquares[selectedIndex]);\n            const lastRows = {\n              1: [0, 1, 2, 3, 4, 5, 6, 7],\n              2: [56, 57, 58, 59, 60, 61, 62, 63]\n            };\n            const isSquareOccupied = tempsquares[index] === null ? false : true;\n            const validMove = tempsquares[selectedIndex].isMoveValid(selectedIndex, index, isSquareOccupied);\n            const pathIndicies = tempsquares[selectedIndex].getPathIndicies(selectedIndex, index);\n            if (validMove) {\n              const validPath = checkValidPath(tempsquares, pathIndicies);\n              if (validPath) {\n                tempsquares[index] = tempsquares[selectedIndex];\n                tempsquares[index].handleMoved();\n                tempsquares[selectedIndex] = null;\n                console.log(tempsquares[index]);\n    \n                // pawn to queen\n                if (tempsquares[index].name === \"Pawn\" && lastRows[1].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(1);\n                }\n                if (tempsquares[index].name === \"Pawn\" && lastRows[2].indexOf(index) >= 0) {\n                  tempsquares[index] = null;\n                  tempsquares[index] = new Queen(2);\n                }\n    \n                // check if king is in check with shallow copied board\n                isMyKinginCheck(tempsquares)\n                .then((check) =>{\n                  console.log(check);\n                  if (check) {\n                    console.log(\"Move your king white!\");\n                    tempsquares[selectedIndex] = tempsquares[index];\n                    tempsquares[index] = null;\n                    setSquares(tempsquares);\n                    setSelectedIndex(-1);\n                    setKing1InCheck(check);\n                  }\n                  else {\n                    var nextTurn = playerTurn === 1 ? 2 : 1;\n                    console.log(index);\n                     setValidMove(true);\n/*                    setSquares(tempsquares);\n                    setSelectedIndex(-1);\n                    setPlayerTurn(nextTurn); */\n\n                      socket.emit('move', {\n                      initialIndex: selectedIndex,\n                      endIndex: index,\n                      gameId: props.gameId,\n                      validMove: validMove,\n                    }) \n\n                  }\n                }) \n                .catch((err) => {\n                  console.log(err);\n                })        \n              }\n              else {\n                console.log(\"invalid path\", pathIndicies);\n                setSquares(tempsquares);\n                setSelectedIndex(-1);\n              }\n            }\n            else {\n              console.log(\"invalid move\");\n              setSquares(tempsquares);\n              setSelectedIndex(-1);\n            }\n          }      \n        }\n      }\n\n      else {\n        console.log(\"not your turn\");\n      }\n    }\n\n      return (\n        <div className=\"Game\">\n          {\n            start ? \n            <div>\n              <div>{usernames[0] === props.username ? usernames[1] : usernames[0]}</div>\n              <Board \n              squares={squares}\n              onClick={(index) => handleClick(index)}\n              player={usernames[0] === props.username ? 1 : 2}\n              />\n              <div>{usernames[0] === props.username ? usernames[0] : usernames[1]}</div>\n            </div>\n            :\n            <div>\n              <div>\n              Welcome to online chess! Send this link with a friend to start your chess game\n              </div>\n              \n              <div>\n                  <input type=\"text\" value={window.location} disabled />\n              </div>\n\n              <div>\n                  <p>Waiting for game to start ...</p>\n              </div>\n            </div>\n          }\n\n        </div>\n      );\n    }\n"]},"metadata":{},"sourceType":"module"}